{"meta":{"title":"Academic Notes","subtitle":"","description":"","author":"MinguW","url":"https://wym0120.github.io","root":"/"},"pages":[{"title":"about","date":"2020-06-29T15:55:06.000Z","updated":"2021-04-12T15:27:48.320Z","comments":true,"path":"about/index.html","permalink":"https://wym0120.github.io/about/index.html","excerpt":"","text":"Yaoming Wen M.Sc. Student (SE) @Nanjing University 南京大学软件工程研究生在读，隶属于南京大学计算机软件研究所。 目前正从事研究「表格理解与自动填充」的相关工作。 个人兴趣 对程序分析、程序合成等话题有较大的兴趣，预计在研究生期间结束目前工作后会参与相关研究。 同时关注人与软件的关系，希望帮助用户获得更好的软件使用体验。 个人专长 本科专业为软件工程，从需求分析到设计实现再到测试部署都得到了系统化的训练。 同时兼修计算机科学的课程（操作系统、计算机系统结构、编译原理、自动机与计算模型、形式化验证...），具备较为完整的计算机世界观，可以从上至下理解 \"Hello World\" 的运行过程。 对中大型系统的设计、实现有一定的经验，有阅读庞大文档的耐心。 1. 本科期间数次在 3-4 人小团队中完成万行代码级别的项目。 2. 独立阅读 Java 虚拟机的规范手册并按照规范实现了能够运行简单的真实程序的模拟器。 从大三开始接受科研锻炼，具备良好的英语阅读与写作能力。 1. 在众包系统的实现中，综合比对几十篇相关工作并从中选取最优方法实现我们的项目。 2. 在计算机系统结构课程上阅读 30 余篇 CPU、GPU 相关并完成综述与 pre 3. 大四期间进入计算机软件研究所SPAR组，进行 Android 与 Synthesis 方面的学习研究。"},{"title":"目录","date":"2020-06-29T11:55:07.000Z","updated":"2021-04-12T15:01:26.113Z","comments":true,"path":"categories/index.html","permalink":"https://wym0120.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-06-29T12:30:32.000Z","updated":"2021-04-12T15:01:26.113Z","comments":true,"path":"tags/index.html","permalink":"https://wym0120.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"[课堂笔记] 软件过程改进","slug":"cmmi","date":"2021-04-12T15:24:08.000Z","updated":"2021-04-17T09:35:24.726Z","comments":true,"path":"2021/04/12/cmmi/","link":"","permalink":"https://wym0120.github.io/2021/04/12/cmmi/","excerpt":"","text":"CMMI 复习总结 CMMI 复习总结 过程改进 连续式表示法与阶段式表示法 等价阶段式定级 关于 CMMI 模型的一系列理解 为什么要有标准过程 如何使用过程模型 为什么过程模型很重要 对 CMMI 模型的一些误解 关于 CMMI 模型的一系列知识点 通用目标与通用实践 对制度化的理解 对通用实践的理解 通用实践和过程域的关系 已执行、已管理、已定义之间的区别 过程之间的关系 通用目标与通用实践 GG1 达成特定目标 GG2 制度化为已管理的过程 GG3 制度化为已定义的过程 说人话版本 相关问题 过程域 过程域的定义 过程管理类 Lv3组织级过程定义(OPD) Lv3组织级过程关注(OPF) Lv3组织级培训(OT) Lv4组织级过程性能(OPP) Lv5组织级绩效管理(OPM) 项目管理类 Lv2项目监督与控制(PMC) Lv2项目计划(PP) Lv2需求管理(REQM) Lv2供方协议管理(SAM) Lv3风险管理(RSKM) Lv3集成项目管理(IPM) Lv4量化项目管理(QPM) 工程类 Lv3需求开发 (RD) Lv3技术解决方案(TS) Lv3产品集成(PI) Lv3确认(VAL) Lv3验证 (VER) 支持类 Lv2度量与分析(MA) Lv2配置管理(CM) Lv2过程与产品质量保证(PPQA) Lv3决策分析与解决(DAR) Lv5原因分析与解决(CAR) PPT 中问题整理 变更记录 过程改进 过程的定义 IEEE: Sequence of steps performed for a given purpose PALL: Logical organization of people, materials, energy, equipment, and procedures into work activities designed to produce a SP ecified end result CMMI GLOSSARY: A set of interrelated activities, which transform inputs into outputs, to achieve a given purpose (These activities can be mapped to one or more practices in CMMI process areas to allow a model to be useful for process improvement and process appraisal.) 如上图所示，将这三个重要方面结合到一起的是组织中所使用的过程。 过程改进的好处 过程使您能够了解正在发生的事情。 通过定义，测量和控制过程，改进将更加成功和持久。 成功引入适当的技术，技巧和工具的可能性增加。 人们可以更加充分地发挥潜力，更加有效。 软件过程和生命周期模型的区别 软件过程和生命周期模型的区别 生命周期模型：一个软件产品或者系统要经历孕育、诞生、成熟、衰亡等阶段，一般称为软件生命周期（软件生存周期）。软件生命周期模型是指人们为开发更好的软件而归纳总结的软件生命周期的典型实践参考。 软件过程：为了实现一个或者多个事先定义的目标而建立起来的一组实践的集合。这组实践之间往往有一定的先后顺序，作为一个整体来实现事先定义的一个或者多个目标。一个软件过程既可以覆盖从需 求到交付的完整生命周期, 也可以仅仅包括某些特定开发阶段。 区别：1、生命周期模型是 对一个软件开发过程的人为划分.同样的软件开发过程, 因为目的不一样, 可能会被划分和 命名成不同的生命周期模型。反过来，同样的生命周期模型，可能软件过程完全不同 2、生命周期模型是软件开发过程的主框架, 是对软件开发过程的一种粗粒度划分。3、生命周期模型中往往只定义管理实践，不包括技术实践 软件项目管理和软件过程管理在管理对象、实现目标和参考模型三个角度的区别 软件项目管理是应用方法、工具、技术以及人员能力来完成软件项目，实现项目目标的过程，其管理的对象是各类软件项目。实现目标：成本、质量、工期（管理三大要素：目标、状态、纠偏）。 参考模型：软件项目管理需要借鉴一些本领域或者其他领域的经验教训, 由此产生了一些用来描述这些经验和教训的概念, 例如软件过程、生命周期模型等。管理视角：成功是否可以复制。 软件过程管理：管理对象是软件过程，管理的目的是为了让软件过程在开发 效率、质量等方面有着更好性能绩效. 参考模型：流水线设计管理。软件项目管理通常关注于一个项目，软件过程管理通常关注不止一个项目。软件项目管理（SCRUM,XP）类似于产品生产管理，软件过程管理（CMMI,SPICE）对应流水线的升级、建设、优化、维护、升级改造。软件过程管理参考模型 CMM/CMMI, SPICE 等软件过程改进参考模型 PDCA，IDEAL，软件过程管理与软件过程改进意思相近。 过程改进的底线 过程改进必须要服务于商业目标，不能为了改进而改进。 比如为了一张证书而改进就是为了改进而改进。 评估应该是改进的起点而不是终点。 过程改进对不同的企业或行业来说，含义是不一样的。 比如 Google 和 Microsoft 什么级别都没有，但是没有人会之一它们的研发能力。 在招标这种场景下，可以认为企业的能力是能够比较的。 连续式表示法与阶段式表示法 CMMI 支持两种使用级别的改进路径。一条路径使组织能够逐步改进其选定的单个过程域(或一组过程域)所对应的过程。另一条路径使组织能够以增量方式应对层次相继的过程域集合来改进相关的过程集。连续式表示法的关注点在于由能力等级度量的过程域能力，而阶段式表示法的关注点在于由成熟度级别度量的总体成熟度。 随着组织达成某一成熟度级别中一系列过程域的通用目标和特定目标，组织在提升组织级成熟度的同时也收获了过程改进带来的收益。 由于每一成熟度级别都为下一级别打下必要的基础，因此，在成熟度级别上的跳级尝试往往会导致反效果。 同时，需要认识到的是，过程改进活动应该关注于以组织的业务环境为背景的组织需要上，并认识到更高的成熟度级别中的过程域可以应对组织或项目的当前的与未来的需要。例如虽然过程组并非成熟度级别 2 级组织的必要特征，但是它可以成为组织达成成熟度级别 2 级途径中的有用部分。 大多数组织对其所选的过程域，至少会选择能力等级 1 级作为目标，这要求达成所有选定过程域的特定目标。然而，将目标定于高于能力等级 1 级的组织会通过实施通用目标与通用实践，来专注于组织内所选过程的制度化。适用于每个过程域的通用目标也已预设完成。通用目标 2 适用于成熟度级别 2 级，通用目标 3 适用于成熟度级别 3 级到 5 级。 成熟度越高，返工的风险就越低，而不是业务的风险降低（所以“收益越大，风险越大”对此并不成立，这句话的对象是做什么事情，而不是做事的方式）。 等价阶段式定级 这张图的作用：一方面快速的知道每一个过程域的具体名称和缩写的对应。另一方面也能够帮助理解能力等级和成熟度等级的区别。 关于 CMMI 模型的一系列理解 能力成熟度模型(Capability Maturity Model，CMM)，包括 CMMI，都是对现实世界的简化表述，它涵盖了开发产品与服务的活动。CMMI 开发模型是一个参考模型，是实践的结构化集合，描述了有效过程的特征。CMMI 开发模型并不规定项目或组织必须遵循特定的过程顺序，或每天必须开发出一定数量的产品，或必须达成特定的绩效指标。模型所规定的是项目或组织应该具备应对开发相关实践的过程。项目或组织可将其过程映射至本模型中的过程域，以确定这些过程是否具备。 为什么要有标准过程 标准过程并不是教条主义，而是为了让项目小组更好地识别其他团队的优秀做法，促进共享。 如何使用过程模型 帮助设定过程改进目标和优先级; 帮助确保稳定，有能力且成熟的过程;作为改善项目和组织过程的指南;通过评估方法来诊断组织当前的实践状态 为什么过程模型很重要 过程模型提供一个开始改进的地方;社区先前经验的好处;共同的语言和共同的愿景;优先行动的框架 对 CMMI 模型的一些误解 CMMI 模型的有关误解:所谓 CMMI 模型，是指 CMMI 刻画了软件团队/组织从不成熟到成熟的每个阶段的特征——即所谓的路线图。与实际的开发模型没关系。这个路线图其实也是 CMMI 模型最为精华的部分，甚至都可以在很多其他的领域借鉴。 推论一: CMMI 模型需要适当裁剪以适应公司的实际情况 CMMI 模型不需要裁剪，模型本身仅仅刻画成熟度路线图上不同阶段的特征。大部分公司都不具备能力来裁剪这个模型，真要裁剪，也是应该由 CMMI 的模型的提出方和维护方 SEI 干。真正需要裁剪的是公司内部定义的组织级开发流程和开发规范，这个需要裁剪以适应具体的项目场景，与 CMMI 模型的裁剪是完全不同的概念。 推论二:CMMI 模型太重了，不适合互联网时代的轻量级开发 这个说法的错误之处在于，不一定是 CMMI 重或者轻，而是，CMMI 根本就不是开发模型 推论三:CMMI 模型只适合大公司,大项目，不适合小项目 首先没人检验过;其次，项目的大小衡量本身也缺乏值得信赖的参考依据;最后，接受这种说法的人还是把 CMMI 当成是一种特殊的开发模型 推论四:CMMI 模型只适合需求不变或者很少变化的场合，不适合需求不确定，变化很多的场合 CMMI 不是开发模型，与需求变化与否无关，谈不上适应或者不适应。 推论五:CMMI 是官僚、重文档的 CMMI评估方法获取证据有两种方法： 验证式：提前准备好所有材料，评估团队根据材料看是否能支持实现目标；就评估团队而言，验证式更省时间（更多公司采用这种方式，导致了误解） 发现式：事先不需要准备好证据，由评估团队在开发现场访谈、自己发现证据 推论六:CMMI 与敏捷是对立的 这种说法是错的。最根本的原因是 CMMI 不是开发过程，而大部分敏捷则是具体的开发过程。两者根本就是风马牛不相及的事物，不具备冲突的基础。所以不存在两者之间的权衡和借鉴。 那么 CMMI 和敏捷到底有没有差异呢？首先，前者不是开发过程，而后者是开发过程，这是最直接最根本的差异。其次，CMMI 存在所谓的标准化，不管是评估方法还是实施办法都有标准化的趋势。而敏捷往往拒绝标准(追求灵活)。再次，作用，即让不熟悉的第三方认可上有差异。尽管 CMMI 目前的现状不乐观，但是，毕竟这种方式提供了一些有 价值的线索来了解某个软件组织的能力和成熟度的可能。 而这一点敏捷过程还无法提供。有一种说法，CMMI 是主要是组织级过程，而敏捷是项目小 组的过程。应该说这种说法有一定的问题，敏捷也可以是组织过程， CMMI 也可以只是关注在小组级别(2 级)。 推论七: CMMI 其不足是过于抽象 所有的模型都是抽象的，抽象恰恰是模型的本质特征之一。模型通过抽象来强化特征与目标之间的关系，这才能帮助我们理解其内在机理，指导具体实践。 关于 CMMI 模型的一系列知识点 CMMIv1.2分为哪三个集群 面向开发的CMMI(CMMI-DEV) 面向采购的CMMI(CMMI-ACQ) 面向服务的CMMI(CMMI-SVC) CMMI来源于那三个模型 ，研究机构 软件工程 sw-cmm 系统工程 EIA/IS 集成化产品和过程开发 IPD-CMM 评估方法简述，评估三种类型、评估的主要依据、评估的结果 SCAMPI评估方法是用于过程改进的标准CMMI评估方法 SCAMPI评估方法有三种类型: Class A:凡是按体系要求的项目都需要按体系要求做，评估的时候采取抽样评估； Class B:评估试点项目与体系文档、CMMI模型的符合度； Class C:评估完成的过程体系与CMMI模型的差距； 目标下的全部实践被全部实施或者被大部分实施，所有缺点不会影响目标的达成。 通用目标与通用实践 对制度化的理解 制度化是过程改进中的一个重要概念。当制度化在通用目标与通用实践的描述中被提及时，就意味着该过程已根植于工作的执行方式中，并且具有过程履行(即执行)的承诺与一致性。已制度化的过程在有压力的情况下更可能得到保持。 说人话就是“主动的、习惯成自然”。接下来引出通用目标和通用实践，这两个东西就是帮助制度化的工具。 对通用实践的理解 通用实践之所以被称为“通用”，是因为相同的实践适用于多个过程域。 与通用目标相关联的通用实践描述了一些活动，这些活动被认为对通用目标的达成具有重要意义，并且有助于过程域所关联过程的制度化。通用实践是可以应用于所有过程域的组件。要将通用实践视为提醒。其目的在于提醒你正确地做事，属于期望的模型组件。 通用实践和过程域的关系 如果说通用目标与通用实践是直接应对过程在组织范围内制度化的模型组件，那么很多过程域则通过支持通用实践的实施来应对制度化。此类过程域含有一个或多个特定实践，当其被实施时，某一通用实践也能得到完全的实施，或产生工作产品用于某一通用实践的实施。 已执行、已管理、已定义之间的区别 已执行的过程是指完成了所需工作而满足过程域的特定目标的过程。 已执行与已管理之间的关键区别在于过程得到管理的程度。已管理的过程得到了计划(该计划可以是一份更全面的计划的一部分)，并且过程的执行依据计划得到了管理。当实际结果与执行情况显著偏离计划时，会采取纠正措施。已管理的过程能达成该计划的目标，并得到了制度化以实现执行上的一致。 已管理与已定义之间的关键区别在于过程描述、标准与规程的适用范围。对于已管理的过程，其过程描述、标准与规程适用于特定的 项目、组或组织级功能。因此，同一组织内的两个项目，其已管理的过程可能并不相同。 另一项关键区别在于，相比已管理的过程，已定义的过程描述更为详细， 执行更为严格。这一区别意味着改进信息更容易被理解、分析并使用。最后，已定义过程的管理建立在更为深入的理解之上，包括在过程活动的相互关系方面的理解，以及在过程、过程工作产品与过程服务的详细度量项方面的理解。 说人话就是已执行就是把工作做完了; 已管理在这个基础之上关注了管理的三大要素:时间、质量、成本; 而已定义则是各方面都更加熟练的管理，翻车几率更小 过程之间的关系 GG1 就相当于所有的 SG 的总和。 达成过程域的 GG1，就等于说你达成了该过程域的特定目标。 达成过程域的 GG2，就等于说你管理了与该过程域相关联的过程的执行。过程就如同任何项目或 支持活动那样得到了计划与监督。 达成过程域的 GG3，就等于说存在组织级标准过程，能够对其进行裁剪(按标准原样执行也是一种裁剪)得到你将要使用的过程。 通用目标与通用实践 GG1 达成特定目标 过程域的特定目标得到过程的支持，过程的支持通过将可识别的输入工作产品转换为可识别的输出工作产品来实现。 通用实践 描述 GP 1.1 执行特定实践 执行过程域的特定实践，以开发工作产品并提供服务来达成过程域的特定目标。 GG2 制度化为已管理的过程 过程得到制度化为已管理的过程。 通用实践 描述 GP 2.1 建立组织级方针 建立并维护组织级方针，以计划并执行过程。 GP 2.2 计划过程 建立并维护计划，以执行过程。 GP 2.3 提供资源 提供充分的资源，以执行过程、开发工作产品并提供过程的服务。 GP 2.4 分派职责 分派职责与职权，以执行过程、开发工作产品并提供过程的服务。 GP 2.5 培训人员 必要时，培训过程的执行或支持人员。 GP 2.6 控制工作产品 将所选择的过程工作产品置于适当的控制级别。 GP 2.7 识别相关干系人，并使之参与 识别过程的相关干系人，并使之按计划参与。 GP 2.8 监督并控制过程 对照执行过程的计划，监督并控制过程，并采取适当的纠正措施。 GP 2.9 客观评价遵守程度 对照过程描述、标准与规程，对过程与所选工作产品的遵守程度进行客观评价，并处理不符合的情况。 GP 2.10 与上级管理层一起进行状态评审 与上级管理层一起对过程的活动、状态与结果进行评审，并解决问题。 GG3 制度化为已定义的过程 过程得到制度化为已定义的过程 通用实践 描述 GP 3.1 建立已定义的过程 建立并维护已定义过程的描述。 GP 3.2 收集与过程相关的经验 收集源于过程的计划与执行的、与过程相关的经验，以支持组织过程与过程资产未来的使用与改进。 说人话版本 GG 2 GP 2.1 Establish an Organizational Policy 比如一个项目是质量优先还是工期优先。 比如组织级培训（Organizational Training）的 Policy 就可以是内部的讲师优先（内部的人员变成讲师）或者外部的讲师优先。 定义了我们优先期望的是什么，在做一件事情的时候，按照一个指导思想去开展。 GP 2.2 Plan the Process 建立和维护一个实施过程的计划。 有一个过程域是 Project Planning（这里的 Planning 是一个动词），那么这时 GP 2.2 应该怎么理解？ 简单来说就是“计划的计划”，直接解释就是为了策划整个项目而做一个计划。 有必要吗？制定一个项目计划的大致步骤有：沟通需求、消化需求、估算、人员分配、开会讨论、计划评审等步骤，而这些步骤是无法短时间内一个人就能完成的，涉及到的人员有多个，所以是有必要制定一个计划来制定项目计划。 GP 2.3 Provide Resources GP 2.4 Assign Responsibility 角色或职责的分配。 可以结合 GP 2.7 理解。在一个过程实施的过程中，一定是有不同的角色和不同的职责。 GP 2.5 Train People 对人员进行培训，让他们具有足够的技能来完成这样工作。 对于组织级培训（OT）应该怎么理解？ 对培训人员进行培训是否有必要？有必要的，比如对讲师的培训可以包括怎样准备素材，怎样去把握节奏等内容。 GP 2.6 Control Work Products 什么是工作产物：比如开了一个周会，产生了一个报告，那么这个报告就是一个 Work Product。 会议记录和需求文档的变更控制力度是不一样的。 很像是进行配置管理，但是配置管理本身是一个过程域，那么对于配置管理，这个目标应该怎么理解？ 配置管理的工作产品有：配置计划、基线发布计划（不能随意更改）、变更请求、配置审计报告（保存即可）。这些工作产品也应该用不同的管控水平去进行管控。 GP 2.8 Monitor and Control the Process 呼应 GP 2.2。就是看一份计划的实施情况。 但并不是所有的计划都是按照日程进行的，比如需求管理变更，我们没有办法知道需求变更会在什么时候提出。 对于 PMC （项目监控）这个过程应该怎么理解？ 一个项目组往往会开周例会，例会往往会对进度进行一些监控等工作，但是开会这件事本身是需要监控的，防止开着开着就不开了。 纠正偏差的措施不能只是停留在周会上，需要让他产生作用，也是需要进行监控的。 GP 2.9 Objectively Evaluate Adherence 确保大家按照流程和规范做事。 QA 相当于过程的警察。不制定规范，但是要执行规范。QA 的 QA 则是执法过程本身也是需要确保合法的。 GP 2.10 Review Status with Higher Level Management GG 3 已定义的过程 GP 3.1 过程定义本身需要遵循一定的流程。 GP 3.2 收集资料这个过程本身也有资料需要进行收集，需要明确定义。 如何应用 GP？ GP/GG 对应的是“好坏”问题，即 Capability Level，而 SP/SG 对应的是“有无”的问题，即 Maturity Level。 GP 和 GG 确保了 SP 和 SG 的可持续性。 相关问题 GP2.5的培训，组织过程相关的过程域培训如何进行 (1)内部:除了过程改进的相关过程域可以由EPG(过程改造专员)进行培训(2)外部:过程改进以”O”字打头的这些比较特殊的过程域请培训机构进行培训 GP2.7 识别和使卷入的英文、两个词语的动作过程解释 识别:把干系人识别出来，认识出来，写到计划文档里头去使卷入:让干系人参与我们的评审过程。比如开评审会议时，需要提意见 比较 GP2.10 中关于领导的描述在CMM和CMMi中的差别，CMMI的改进有何具体意义 CMM: high management(高层领导)CMMI: higher level management(高级别领导)高层领导是提供一些授权，赋予你一定的权利。在资源方面提供大方向的把握高级别领导能够在问题解决的实际意义上和资源的调剂上面起到实质性的作用 过程域 过程域的定义 某个领域中的一系列相关实践，如果共同实施，则可以满足一系列目标，这些目标对于该领域的改进至关重要 过程管理类 理解上面这张图可以从 OPD 开始，首先 OPD的目的和作用是帮助我们正确理解 CMMI。它不是开发方法，而是建立组织级开发流程，用来指导每个项目组开发。简单来说就是在进行了一段时间的软件开发之后，发现了实践过程中可以改进的地方，OPD 可以根据这些建议为自己这个组织定义了新的过程。 而这些建议也会被 OPF 所获得，而 OPF 的执行过程中比较直观地（不够客观度量）总计了当下过程的优缺点，给了 OPD 更多的信息。同时 OPD 还综合考虑了业务目标进行新的定义。 在有了新的过程之后，必须通过 OT，也就是培训来让相关技术人员掌握新的过程。 所有这上面的过程域都是针对过程本身的，最重要的目的就是希望整个组织在一次次项目过程中不断改进自己的过程实践。而因为这些过程域都只是3级的，相对而言比较粗糙、不够客观。 理解上面这张图首先从搞清楚名词开始。 OPP 组织级过程性能: 结合术语表和过程域自身的描述，过程性能实际上是完成了这个过程之后，某些组织、客户所关心的属性达成了什么样的指标，例如工作量、周期、缺陷排除有效性，OPP关心的是一个结果。而它的一系列的子实践就是在选定我关心什么、怎么度量我所关心的东西、我需要其他过程域至少给我提供哪些东西（基线）、使用什么模型来计算。值得注意的是 OPP 中所用的方法都是量化的方法，这是它和之前低级的过程域的一个显著区别。 显然，如果只有一个目标是无法实现的，因此，OPP 需要和 OPM 配合。 OPM 组织级绩效管理: 绩效的含义是项目在项目计划执行方面的达成情况，包括工作量、成本、进度以及技术性能。简单来说，OPM 的作用就是来主动监管 OPP 以及其他过程域中的目标是否被完成，没有完成就试图找到办法去弥补。OPM是一个5级的过程域，其实和 OPF 是一回事，所以我们通常说OPM是一个增强版本的 OPF，体现在管理从定性到定量。 Lv3组织级过程定义(OPD) 目的: 建立并维护一套可用的组织级过程资产、工作环境标准以及团队规则与指南。 概要 SG 1 建立组织级过程资产 SP 1.1 建立标准过程 SP 1.2 建立生命周期模型描述 SP 1.3 建立裁剪准则与指南 SP 1.4 建立组织的度量库 SP 1.5 建立组织的过程资产库 SP 1.6 建立工作环境标准 SP 1.7 建立团队的规则与指南 Lv3组织级过程关注(OPF) 目的: 基于对组织过程与过程资产当前的强项与弱项的透彻理解，计划、实施并部署组织级过程改进。 概要 SG 1 确定过程改进机会 SP 1.1 建立组织级过程需要 (当前使用的过程资产不能满足业务目标的时候需要做过程改进) SP 1.2 评估组织的过程 (对当前过程进行评估) SP 1.3 识别组织的过程改进 SG 2 计划并实施过程行动 (如何改) SP 2.1 建立过程行动计划 SP 2.2 实施过程行动计划 SG 3 部署组织级过程资产并纳入经验 (改完如何用) SP 3.1 部署组织级过程资产 (比如规格约定了sonarqube能用，必须用，3.1就是部署sonarqube，让它真正能使用) SP 3.2 部署标准过程 (指导大家使用，QA确保sonarqube得到所有团队使用) SP 3.3 监督实施 (对于使用过程进行监控) SP 3.4 将经验纳入到组织级过程资产中 Lv3组织级培训(OT) 目的: 发展人员的技能与知识，使其能够有效且高效地执行他们的角色。 概要 SG 1 建立组织级培训能力 SP 1.1 建立战略培训需要 SP 1.2 确定哪些培训需要属于组织的职责 SP 1.3 建立组织级培训的战术计划 SP 1.4 建立培训能力 SG 2 提供培训 SP 2.1 交付培训 SP 2.2 建立培训记录 SP 2.3 评估培训的有效性 Lv4组织级过程性能(OPP) 目的: 建立并维护对组织标准过程集中所选定过程性能的量化理解， 以支持达成质量与过程性能目标， 并提供过程性能数据、基线与模型， 以量化管理组织的项目。 概要 SG 1 建立性能基线与模型 SP 1.1 建立质量与过程性能目标 SP 1.2 选择过程 SP 1.3 建立过程性能度量项 SP 1.4 分析过程性能并建立过程性能基线 SP 1.5 建立过程性能模型 x.y.z代表着什么 首先 x.y.z 这样的目标表示主要出现在4-5级的过程域中，因为只有到这个级别的过程域才会量化的考虑目标。z通常用来表示整个项目的目标，比如最终上线的时候每一千行缺陷不超过一个要做到z这个目标那么就需要把之前的上游的一些东西管控起来比如单元测试的质量，这就是y但是单元测试是没办法管控的，所以依赖于更底层的x，例如对人员的技能有要求 Lv5组织级绩效管理(OPM) 目的: 主动地管理组织的绩效以满足其业务目标。 概要 SG 1 管理业务绩效 SP 1.1 维护业务目标 SP 1.2 分析过程性能数据 SP 1.3 识别潜在改进领域 SG 2 选择改进 SP 2.1 挖掘所建议的改进 SP 2.2 分析所建议的改进 SP 2.3 确认改进 SP 2.4 选择并实施将要部署的改进 SG 3 部署改进 SP 3.1 计划部署 SP 3.2 管理部署 SP 3.3 评价改进效果 项目管理类 要理解这部分最好先看工程类和支持类过程域都有哪些东西。 从 PP 讲起， PP 主要是和工程类的进行交互，例如 RD ，首先知道需要客户想要什么，然后 PP 会告诉工程类的过程域让他们做什么，告诉支持类的需要什么样的度量，告诉 PMC 需要监督什么。 接着是 PMC，PMC 从 MA 和 PPQA 那里拿到了真实的过程执行状态和评价，它会根据这个结果来进行纠偏。这个纠偏包括了项目内部的(反馈给工程类过程域)，也包括了对供方的纠偏。 这里的供方举例比较好理解，例如项目开发需要 IDE，需要购买服务器测试，而这些服务、产品的提供者就是供方，SAM 可能在大项目大组织中比较重要，在小规模的时候作用似乎不明显。 REQM 的存在是为了保护程序员的身心健康，虽然说敏捷中是拥抱变化的，但其实没有人真的愿意一直面对不停变更的需求。 从前面低等级的过程域里可以看到一个项目已经基本被管理起来了，内部是比较协调的。但是除了内部的不稳定因素，项目外也伴随巨大的风险，比如客户的需求变更。因此 RSKM 提出了进一步的需求（3级建立在2级基础之上，前面过程域2级居多）。RSKM 是比较有预见性的，结合敏捷里学过的知识，很多实践其实也和敏捷有关，例如让客户陪你一起受苦，尽早把原型做出来给他们看。 但是风险管理这件事情也不能随便就制定下来，它还需要其他的过程域的一些支持，例如 IPM。 IPM 是在尝试在一个项目中对标准的过程进行裁剪，说人话就是让过程符合自己组织和项目的特点，它是从已经执行的过程中吸取教训以及总结好的经验。IPM 知道在这个项目中哪些因素是风险。所以它是 RSKM 的一个输入。IPM 这个过程域的执行也会同时反馈出一些经验、产出一些数据给其他的过程域，处于一个比较中心的位置。（个人觉得可以重点复习一下这里） 而随着成熟度的进一步提高，QPM 能够通过量化的方式优化 IPM 所做的事情，例如图中可以看到的“风险暴露值”。QPM 的实现也能让 IPM 的输入来源更多，这意味着得到的结果可以更加精准。 Lv2项目监督与控制(PMC) 目的: 提供对项目进展的了解，以便在项目绩效显著偏离计划时可采取适当的纠正措施。 概要 SG 1 对照计划监督项目 SP 1.1 监督项目计划参数 SP 1.2 监督承诺 SP 1.3 监督项目风险 SP 1.4 监督数据管理 SP 1.5 监督干系人的参与 SP 1.6 进行进展评审 SP 1.7 进行里程碑评审 SG 2 管理纠正措施直至关闭 SP 2.1 分析问题 SP 2.2 采取纠正措施 SP 2.3 管理纠正措施 项目监控点选择的原则？原因 A.重要的里程碑 原因:项目阶段重要的完成标志，通过才能证明这一阶段任务完成，才能满足干系人的期望B. 时间间隔比较合理 原因:假如时间太长不能在合适的时期对偏差进行纠偏行动，会延误项目进展，时间太短不起作用，没法监控到项目的具体指标 SG2中的相关实践约定，需要采取纠偏措施的问题来源 来自于项目监控过程域，PPQA收集问题:项目监控、验证、确认；项目监控过程域中的问题列表管理 纠偏行动的先决条件 有偏离问题列表，在偏差界限达到15%或20%时，进行纠正 管理的三要素 目标、状态、纠偏 Lv2项目计划(PP) 目的: 建立并维护定义项目活动的计划。 概要 SG 1 建立估算 SP 1.1 估算项目范围 SP 1.2 建立对工作产品与任务属性的估算 SP 1.3 定义项目生命周期阶段 SP 1.4 估算工作量与成本 SG 2 制订项目计划 SP 2.1 建立预算与进度 SP 2.2 识别项目风险 SP 2.3 计划数据管理 SP 2.4 计划项目资源 SP 2.5 计划所需的知识与技能 SP 2.6 计划干系人的参与 SP 2.7 建立项目计划 SG 3 获得对计划的承诺 SP 3.1 评审影响项目的各项计划 SP 3.2 协调工作与资源水平 SP 3.3 获得对计划的承诺 PP过程域在项目中的作用域 项目启动阶段后开始，一直到验收阶段开始一段时间到管理收尾 计划制定的原则？ 产品计划的制订是由上往下制订，由下往上修改的过程 一般的估算方法有哪几个？区别 1)Delphi(德尔菲)估计，PERT Sizing 估算2)区别:Delphi适用于项目资金多的时候，项目前期做估计(大项目)PERT Sizing适用于时间短，资金少的时候，适用于后期比较明朗，紧迫的项目或项目中后期的重估计的时候(小项目)两种方法比较:PERT Sizing估算花的时间短，资金用的少，精确度不高。Delphi成本高，时间长，精确度高。 什么是承诺管理？承诺的分类 承诺管理是对干系人承诺进行管理、保证，并兑现干系人的承诺。分为3类:结盟和协议、促进合作、允许变更 PP中“建立”和“维护”两个活动的解释？ 建立:把项目文档写好并发布出去维护:项目实施过程中，发现项目的进展和计划发生偏差的时候进行调整 估算目标: 不是尽可能客观描述代码行/工作量（永远不可能实现估算），而是得到一个数字数字对不对不重要，重要的是大家认可 Lv2需求管理(REQM) 目的: 管理项目的产品与产品组件需求，并确保那些需求与项目计划和工作产品间的协调一致。 概要 SG 1 管理需求 SP 1.1 理解需求 SP 1.2 获得对需求的承诺 SP 1.3 管理需求变更 SP 1.4 维护需求的双向可追溯性 SP 1.5 确保项目工作与需求间的协调一致 (需求跟踪的方法) 需求跟踪矩阵的使用 是需求跟踪矩阵的一个规程。在改写相关的产品的时候，相关的工作产品也要跟着去改。(比如:现在我在写代码，要去改设计文件，相关的产品设计文档和代码都需要修改。) (获得需求承诺) 应该获得那些人的承诺 需求相关干系人:项目组内部:项目经理，需求分析师，设计人员，企业高层; 外部:供应商，客户 识别需求不一致性的最有效方法 需求评审 敏捷对于需求的态度是拥抱变更，但这是不正确的，大部分开发人员还是希望能够close开发 Scrum对于需求的态度是不响应一个SP rint中的需求变更(目标不变)，只是记录到backlog，可能会在下一个迭代响应变更 理解双向可跟踪 双向可追踪关注的是需求之间的关系。术语表上的定义是“两个或更多逻辑实体间可从任一方向（即至某一实体或自某一实体）认识的关联”，这里的两个实体指的是高层次的需求和低层次的需求。这两种需求往往是多对多的关系，但是在有频繁变更的时候，管理的代价比较高昂。例如一个需求变化了，会导致其他和他相关的需求、设计、代码等等都会发生变化。一个比较极端的做法是以文档作为最小的颗粒度，一对一的去联系这两个实体，这么做虽然管理代价变低，但是每个需求变更的影响评估也就没有办法实施了。因此在实际中的做法是在一个比较小粒度的层次上（例如功能点）找到一个平衡，在这个层次上去做双向可跟踪。 先做计划还是先做需求 应该先做计划，再做需求。可以先大致的讨论需求的范围得到一个初步的需求，当大家认为到了可以进行估算的程度时，就开始进行计划。 Lv2供方协议管理(SAM) 目的: 管理从供方采购产品与服务的活动。 概要 SG 1 建立供方协议 SP 1.1 确定采购类型 SP 1.2 选择供方 SP 1.3 建立供方协议 SG 2 履行供方协议 SP 2.1 执行供方协议 SP 2.2 接受采购的产品 SP 2.3 确保产品移交 Lv3风险管理(RSKM) 目的: 在项目潜在的问题发生前对其进行识别，以便在整个产品或项目生命期中，计划并在需要时启动风险的处理行动，从而降低这些潜在问题对达成目标产生的不利影响。 概要 SG 1 准备风险管理 SP 1.1 确定风险来源与类别 SP 1.2 定义风险参数 SP 1.3 建立风险管理策略 SG 2 识别并分析风险 SP 2.1 识别风险 SP 2.2 评价、分类风险并划分风险优先级 SG 3 缓解风险 SP 3.1 制订风险缓解计划 SP 3.2 实施风险缓解计划 Lv3集成项目管理(IPM) 目的: 从组织的标准过程集中裁剪得到集成的已定义过程，并以此为依据建立并管理项目以及相关干系人的参与。 概要 SG 1 使用项目已定义的过程 SP 1.1 建立项目已定义的过程 SP 1.2 使用组织级过程资产计划项目活动 SP 1.3 建立项目工作环境 SP 1.4 集成各类计划 SP 1.5 使用集成的计划管理项目 SP 1.6 建立团队 SP 1.7 为组织级过程资产做出贡献 SG 2 与相关干系人协调并协作 SP 2.1 管理干系人的参与 SP 2.2 管理依赖 SP 2.3 解决协调问题 Lv4量化项目管理(QPM) 目的: 量化地管理项目，以达成项目已建立的质量与过程性能目标。 概要 SG 1 准备量化管理 SP 1.1 建立项目的目标 SP 1.2 组成已定义的过程 SP 1.3 选择子过程与属性 SP 1.4 选择度量项与分析技术 SG 2 量化地管理项目 SP 2.1 监督所选定子过程的性能 SP 2.2 管理项目绩效 SP 2.3 执行根本原因分析 OPP 和 QPM 的关联 QPM 确保了 OPP 建立的基线能够被完成，QPM 的项目目标基于 OPP 中构建出的组织级的质量与过程性能，QPM 可以根据项目的特点来对这些目标进行调整 QPM SP1.2 和之前过程定义的区别 （和 IPM 的区别） Lv2 Lv3的过程域主要定义的是步骤，而 QPM 中需要用到一些统计的量化的手段来定义这个过程。这些手段用来告诉执行者需要做到什么程度。QPM 通过为项目评价备选过程或子过程， 并选择那些最可能达成质量与性能目标的过程或子过程 QPM 和 OPM 的关系 简单的从成熟度级别上看，QPM 是4级，而 OPM 是5级，说明至少 OPM 一定程度上依赖 QPM。QPM 关注的是项目，而 OPM 关注的是组织，显然后者的范围更大。文档中的描述“本过程域适用于管理项目。应用这些概念来管理其他组与职能有助于将组 织绩效的不同方面关联起来，从而提供一个基础，来平衡并协调存在竞争 的优先级关系，以应对更广泛的业务目标集合。” 说人话就是把组织的每个项目都量化管理好了，那么也就有可能在组织的层面把量化管理能力提高上去，达成 OPM 的目标。 工程类 工程类的非常好理解，就是日常开发所经历的流程，这里不赘述了。 Lv3需求开发 (RD) 目的: 挖掘、分析并 建立客户需求、产品需求与产品组件需求。 概要 SG 1 开发客户需求 SP 1.1 挖掘需要 SP 1.2 将干系人的需要转换为客户需求 SG 2 开发产品需求 SP 2.1 建立产品与产品组件需求 SP 2.2 分配产品组件需求 SP 2.3 识别接口需求 SG 3 分析并确认需求 SP 3.1 建立操作概念与场景 SP 3.2 建立必需的功能与质量属性的定义 SP 3.3 分析需求 SP 3.4 分析需求以达到平衡 SP 3.5 确认需求 Lv3技术解决方案(TS) 目的: 选择、设计并实现对需求的解决方案。解决方案、设计与实现包括单独的或以适当形式组合的产品、产品组件以及与产品相关的生命周期过程。 概要 SG 1 开发客户需求 SP 1.1 挖掘需要 SP 1.2 将干系人的需要转换为客户需求 SG 2 开发产品需求 SP 2.1 建立产品与产品组件需求 SP 2.2 分配产品组件需求 SP 2.3 识别接口需求 SG 3 分析并确认需求 SP 3.1 建立操作概念与场景 SP 3.2 建立必需的功能与质量属性的定义 SP 3.3 分析需求 SP 3.4 分析需求以达到平衡 SP 3.5 确认需求 DAR 和 TS 的关联和区别 TS 与 DAR 的区别：TS 要求进行技术方案的选择，其实际就是一个 DAR 的过程，从这点上来看两者是一致的，但是 DAR 的范围更加广阔，不仅仅局限于技术方面，比如说版本发布，过程推行等都可以考虑使用 DAR。 DAR 的适用场景 DAR 建立一个 Guildline 来指明什么场景下需要 DAR，什么场景下不需要。不是所有的活动都要走 DAR 的过程。 Lv3产品集成(PI) 目的: 将产品组件装配成产品，确保产品作为一个整体正确地运行，即具有所要求的功能与质量属性，并交付产品。(不只是集成测试，PI 也包括了交付的步骤) 概要 SG 1 准备产品集成 SP 1.1 建立集成策略 SP 1.2 建立产品集成环境 SP 1.3 建立产品集成规程与准则 SG 2 确保接口兼容性 SP 2.1 评审接口描述的完整性 SP 2.2 管理接口 SG 3 装配产品组件并交付产品 SP 3.1 确定需集成的产品组件准备就绪 SP 3.2 装配产品组件 SP 3.3 评价装配后的产品组件 SP 3.4 打包并交付产品或产品组件 假设你是产品集成的负责人，拒绝那些不合格的产品组件。定义哪些验收标准 1. 确保产品组件已经进入配置库里面2. 待集成的产品组件必须经过单元测试（部分集成测试），提供测试报告3. 完整的接口描述文档4. 和生命周期有关的过程证据（质量角度考虑）例如评审报告、QA检查报告 Lv3确认(VAL) 目的: 证明产品或产品组件被置于预期环境中时满足其预期用途。 概要 SG 1 准备确认 SP 1.1 选择需要确认的产品 SP 1.2 建立确认环境 SP 1.3 建立确认规程与准则 SG 2 确认产品或产品组件 SP 2.1 执行确认 SP 2.2 分析确认结果 Lv3验证 (VER) 目的: 确保选定的工作产品满足其规定的需求。 概要 SG 1 准备验证 SP 1.1 选择需要验证的工作产品 SP 1.2 建立验证环境 SP 1.3 建立验证规程与准则 SG 2 执行同级评审 SP 2.1 准备同级评审 SP 2.2 进行同级评审 SP 2.3 分析同级评审数据 SG 3 验证选定的工作产品 SP 3.1 执行验证 SP 3.2 分析验证结果 VAL 和 VER的关键区别 VER 选择的是工作产品，即过程中自然的产物，VER 确定工作产品适当地反映了其规定的需求。而 VAL 选择的是产品。VAL 确定提供的（或将要提供的）产品或服务将满足其预期的用途解决方案，关注是否真的帮客户解决问题。另外：产品一定是工作产品，工作产品不一定是产品；交付给用户的才是产品；在不同场景中，交付给用户的产品可能不同 支持类 支持类的普遍比较好理解，MA 为所有的东西规定了度量和分析的准则，是高成熟度过程域量化的前提。PPQA 则是提供了对过程执行的客观评价和度量，提供了改进的建议和基础。是后续OPD OPF 等过程域的基础。而 CM 管理了配置项的变动，让复杂的过程执行得到控制，不会因为版本或不一致的问题带来巨大的灾难，保证了其他过程域的正常执行。 CAR 是5级成熟度的过程域，它建立在其他所有的过程域都能够良好执行的基础上。CAR 其实贯穿于组织和项目的始终，只是在不同成熟度的时候它的能力也有所不同。具体来说就是从只能排除具体原因到排除真正根源上的原因，它为组织的过程改进提供了方向和思路。而 DAR 是一个3级成熟度过程域，3 级是一个比较有特点的级别，在它之前是已管理，也就是说不管做的怎么样，反正先把项目做出来。而 3 级要求已定义，则是建立各种规章制度。比如 DAR 解决的问题就是到底该如何做决定，整个组织是遵循同一个标准做决策的。最直接的体现就是后续高成熟度的过程域都是带有预见性质的，也就是说需要在某些时刻作出正确且一致认可的决定。 Lv2度量与分析(MA) 目的: 开发并保持用于支持管理信息需要的度量能力。 概要 SG 1 使度量与分析活动协调一致 SP 1.1 建立度量目标 SP 1.2 明确说明度量项 SP 1.3 明确说明数据收集与存储的规程 SP 1.4 明确说明分析规程 SG 2 提供度量结果 SP 2.1 获得度量数据 SP 2.2 分析度量数据 SP 2.3 存储数据与结果 SP 2.4 沟通结果 下面这些题目应该是往年的资料，不一定是CMMI1.3的内容，至少我没有在文档中和ppt中找到相关的描述，请自行斟酌 度量分析的作用体现在哪些方面？(从项目和组织两个角度分析) 项目组:提供了信息，为管理者提供决策信息，(告诉管理者项目所处在什么阶段，将来应该进行相应的项目管理决策。)组织:为组织及过程改进，提供决策信息。(要知道组织过程处于什么阶段，将来的改进方向) 度量的目的要支持质量的目标 与产品质量有关:测试覆盖率、缺陷数量；一次性测试通过率；关键重要特性合格率；与成本有关:开发成本、维护成本、管理成本、现场服务时间；与产品交付有关:准时交付率；交付完整性、产品错发次数；延期交付率；一次准时交付率；与客户有关:顾客满意率；客户投诉次数；处理投诉时间；与人员及设备有关:员工满意率；设备利用率；设备完好率；设备故障率；培训效果； 如何满足度量的可追踪性(哪些工作产品可以满足) 用度量数据库，例如项目度量表 MA 和 PMC 的区别 MA 针对的是状态而不是进度，与 PMC 有区别，目的是帮助我们了解目标的状态与实际的状态之间的差异 重要术语 Base Measure 定义了一个属性，以及量化这个属性的方法。 比如缺陷的个数，功能点数，开发的工时等。 人月，人时，人天是 Base Measure Derived Measures 两个或更多的 Measures 计算后（通过一个函数）得到的 Measure。 比如缺陷的密度（缺陷个数&#x2F;千行），严重缺陷的百分比区别：Base Measure 是客观存在的，但是刻画能力不够，所以需要 Derived Measure 进行补充。 Lv2配置管理(CM) 目的: 使用配置识别、配置控制、配置状态记录与报告以及配置审计(也就是配置管理的四项主要工作)，来建立并维护工作产品的完整性。 概要 SG 1 建立基线 SP 1.1 识别配置项 SP 1.2 建立配置管理系统 SP 1.3 创建或发布基线 SG 2 跟踪并控制变更 SP 2.1 跟踪变更请求 SP 2.2 控制配置项 SG 3 建立完整性 SP 3.1 建立配置管理记录 SP 3.2 执行配置审计 一个软件开发过程中会产生很多工作产品artifacts/work product，但是并不是所有产品都是值得管理的，要去掉一些不那么重要的产品，确保重要的（为了让交付有完整性的）工作产品被管理。其实就是为了减少工作量。 因为往届的资料里有大量的关于CCB的问题，但是CMMI1.3文档中只是提到了几句，这里特别整理一下 2. CCB 根据wiki 上面的定义: Change Control Board (CCB) is a committee that consists of Subject Matter Experts (SME, e.g. software engineers, testing experts, etc.) and Managers (e.g. Quality Assurance managers), who decide whether to implement proposed changes to a project.简单来说 CCB 就是一群有权利控制变更的人。人员:项目经理，配置管理员，质量保证人员，开发人员代表，客户代表性质:为了控制项目基线的变更进行审批授权的临时性质的组织。他们的职责:确保变更被分类以及被评估评审和批准变更解决关于变更请求的争议做出关于变更的最终决策决定需要实施的变更的优先级确保只有被批准的变更得到实施 配置管理员的主要职责 制定配置管理计划；识别配置项；定义基线；定义配置库结构；管理、备份配置库；控制变更；生成配置管理状态报告；对项目成员进行配置管理培训 配置项标示的规则，什么情况下改写Vx.y.z中的x和y？什么说情况下改写z？规则是怎样的 级别不同，修改不同。处于开发阶段只能改z，如果过了评审则由配置管理员改x，y。如果是比较小的变更处在一条基线上的话只改y，如果进行大规模的变更的话改x 配置管理系统的等级？三个概念库如何体现配置库的等级？配置库需要注意什么 通过对不同库的配置项设置不同权限体现三个概念库:开发库，基线库，产品库。开发库:由项目组内部人员进行控制，可以随意的根据自己的需要进行修改，不需要变更申请。基线库:由项目的配置人员进行变更，要通过变更控制流程进行修改。产品库:由公司的配置管理员进行修改，发布的必须由公司的配置管理员进行发布。注意点：配置库应该包括采购的组件配置库中只需要保存关键性版本不需要全部版本保存 基线的定义和特点 经过正式评审并取得共识的规格说明与工作产品的集合，该集 合成为之后进一步开发的基础，并且只能通过变更控制规程才 能进行变更。 Lv2过程与产品质量保证(PPQA) 目的: 向员工与管理层提供对过程及其相关工作产品的客观洞察。 概要 SG 1 客观评价过程与工作产品 SP 1.1 客观评价过程 SP 1.2 客观评价工作产品 SG 2 提供客观洞察 SP 2.1 沟通并解决不符合问题 SP 2.2 建立记录 软件项目质量的分类 内部、外部、使用质量，过程和产品，但绝不是绝对的过程和绝对的产品，过程质量影响产品质量，产品质量取决于过程质量，互相影响。 QA行使的角色 三类:警察、医生和老师 简要说明QA工作在项目全过程的三种角色体现老师的角色在项目前期，QA辅助项目经理制定项目计划，包括根据质量体系中的标准过程裁剪得到项目定义的过程，帮助项目进行估算，设定质量目标等；对项目成员进行过程和规范的培训以及在过程中进行指导等。警察的角色在项目过程中，QA有选择性地参加项目的技术评审，定期对项目的工作产品和过程进行审计和评审。医生的角色在项目过程中，QA也可以承担收集、统计、分析度量数据的工作，用于支持管理决策。关注的是产品的质量吗？QA并不对最终产品的质量负责，除非质量出现问题的原因来自流程和方法。QA 只关注方法流程是否正确，并不关注测试。QA 不应是测试人员，但是许多企业都把 QA 当作测试人员。 解释 PPQA QA SQA NC QC OE PPQA:产品过程质量保证过程域QA:质量保证专员，质量保证学科SQA:软件的质量保证专员，软件质量保证NC:不符合项QC:质量控制OE:客观评价 QA 和 QC差别？ QA 是质量保证，QC是质量控制 质量控制是质量保证的重要手段，质量控制是质量保证的一个部分，但是质量控制是发现问题的时候要去纠正的重要手段。 执行PPQA的工具方法 评审、审计、checklist、因果图、饼图 简述评审一般过程、审计一般过程 (1)评审一般过程:1.前期准备:提前发资料，提前预审并提出问题!2.执行评审，怎么执行:采用检查单,不迟到，要签到。跑题不要太远3.评审过程怎么进行:进行度量、统计效率4.评审结束:记录表现(2)执行过程审计一般过程准备:选PA，检查单，计划，评审执行:审计，初步沟通，建议评审和审计活动以检查工作产品和访谈作为主要工作来源，估算过程，进行访谈，访谈步骤，检查文档结果后期:最终报告，跟踪NC，提供建议 QA人员以及PPQA过程的质量保证如何实现 QA要形成质量记录，由QA的经理来进行审查PPQA过程也要形成记录保证客观性。QA 人员往往是独立于开发部门的，以此来确保 QA 人员敢于指出问题。尽可能把审查做成检查表，以此来消除主观性。 如何评价\"测试驱动开发TDD可以显著提升质量\"这一说法 TDD不应该能给质量带来显著提升，如果这个提升十分显著，那么就说明之前的单元测试做的是有问题的。 PPQA 的关注点 PPQA 关注做的与规定的流程是否是否一致，不是最终产品的质量 Lv3决策分析与解决(DAR) 目的: 使用正式的评价过程，遵循已建立的准则，对已识别的多个备选方案进行评价，以分析可能的决策。 概要 SG 1 评价备选方案 SP 1.1 建立决策分析指南 SP 1.2 建立评价准则 SP 1.3 识别备选解决方案 SP 1.4 选择评价方法 SP 1.5 评价备选解决方案 SP 1.6 选择解决方案 选择备选方案的时候还需要注意什么 选择解决方案包括对备选方案的评价结果进行权衡考虑。应评估实施解决方案的关联风险。 Lv5原因分析与解决(CAR) 目的: 识别所选结果的原因并采取行动，以改进过程性能。 概要 SG 1 确定所选结果的原因 SP 1.1 选择需要加以分析的结果 SP 1.2 分析原因 SG 2 处理所选结果的原因 SP 2.1 实施行动提议 SP 2.2 评价已实施行动的效果 SP 2.3 记录原因分析的数据 CAR 在本质上做的是什么 当有问题出现的时候找到问题的根本原因，在后续的CMMI版本中其实在1级2级也是可以进行 CAR 的 CAR 一定是选坏的吗 CAR 也可以选择好的实践进行总结，将这些经验在组织内部进行传递 CAR 实际上是依赖于 OPM 进行执行的 CAR 的理念是不犯错比犯了错再改正更好 CAR 在4级和5级的不同 4级主要排除因为特殊原因引起的问题，5级排除真正普适的根因 CAR 为什么需要和 OPM 配合 因为5级的CAR不能做非常粗糙的改进，而是需要细化的改进，OPM 可以量化这个过程 CAR 的例子 原来的同行评审不适用，换了个成本低的解决了这个问题（saveALL 是低端产品） PPT 中问题整理 Requirements Management Which of the following examples of requirements traceability are adequate?1. Customer requirements to system requirements and vice versa, but no other traceability2. System requirements to software and hardware requirements and vice versa, but no other traceability3. Software and hardware requirements to design components and test cases and vice versa, but no other traceability 此处系统需求等同于产品需求，软、硬件需求等同于产品组件需求。 和项目的上下文、粒度综合起来看，没有标准答案 Project Planing PASS is planning their resources. What project resources should be included?• Tools• Budget and funding• Staff• Project plans• Facilities 项目计划不是资源，其余都是。因为资源需要被安排到计划中 Project Management and Control Project Problems1) People are not showing up at peer review meetings.2) Actual costs continually exceed planned costs.3) People are delinquent on their action items.4) Management does not know PASS status.5) People are not meeting schedules.PMC SPsa) SP 1.1 Monitor Project Planning Parametersb) SP 1.2 Monitor Commitmentsc) SP 1.5 Monitor Stakeholder Involvementd) SP 1.6 Conduct Progress Reviewse) SP 2.3 Manage Corrective Action 1-c 2-a 3-e 4-d 5-b Risk Management 1. PASS identified risks associated with their suppliers.2. Risks were grouped by likelihood of occurrence and impact.3. PASS identified risks associated with innovative technology.4. Impact can be high, medium, or low.5. At the risk management meeting, the status of some risks were changed to retired, mitigated, or closed.a) Risk sourceb) Risk categoryc) Risk parameter 13-a 2-b 45-c Supplier Agreement Management PASS uses a supplier for motion sensors. Match PASS sample activities to SAM SPs.Sample Activities1) PASS wrote a contract with DetectEx.2) Supplier motion sensors were sent to integration and testing.3) A trade study conducted by PASS selected DetectEx for motion sensors.4) The motion sensors passed acceptance criteria.5) COTS were used for the keypad; sensors were secured from suppliers; and the controller consists of re-used PASS in-house software.SAM SPsa) SP 1.1 Determine Acquisition Typeb) SP 1.2 Select Suppliersc) SP 1.3 Establish Supplier Agreementsd) SP 2.2 Accept the Acquired Producte) SP 2.3 Ensure Transition of Products 1-c 2-e 3-b 4-d 5-a Configuration Management Which CM SPs could have prevented the problem?PASS delivered updated software to SaveAll. SaveAll wanted to know what changed, but PASS wasn’t sure because change request records were incomplete.1. SP 1.1 Identify Configuration Items2. SP 1.2 Establish a Configuration Management System3. SP 1.3 Create or Release Baselines4. SP 2.1 Track Change Requests5. SP 2.2 Control Configuration Items6. SP 3.1 Establish Configuration Management Records7. SP 3.2 Perform Configuration Audits 全都是 Process and Product Quality Assurance Which are process evaluations? Which are product evaluations?1. QA attends a peer review and mentions there should be an attendance sheet.2. QA watches the engineers assemble a security system and notices a component was put in the wrong place.3. QA reviews the requirements and notices a missing requirement.4. QA reviews the design and notices some engineering drawings are missing.5. QA notices that the test group does not always fill out problem reports. 正确答案是1，2，3，4，5，过程和产品都是有可能的 Verification Which of the following are adequate for verification procedures and criteria?1. Peer review criteria that says, “Ensure products are complete, consistent, and correct.”2. Checklists for peer reviews3. A test procedure that lists test steps and how to judge whether each test step passed or failed4. A procedure on how to do the verification process5. A procedure on how to do peer reviews 没有一个标准答案，主要是依据项目的情况来看的。例如第二点，对一个大的项目，有很多专家来进行评审，一个检查表反而可能产生疏漏 Validation Which are verification and which are validation?1. PASS conducts a formal design review with SaveAll.2. PASS has a peer review with the systems engineers, software engineers, and QA.3. PASS demonstrates a prototype to SaveAll to get their feedback.4. PASS formally tests the product prior to delivery with both SaveAll and QA witnessing the test.5. PASS integrates the components and tests the system. 都有可能。5在大多数情况下是VER，如果考虑环境因素VAL。需要看在哪个阶段，大部分的时候集成了之后还有下一次迭代，这个时候是工作产品，所以是VER。而如果没有下一个迭代直接交给用户这个时候就是交产品，所以是VAL。 Organizational Process Focus Which of the following show incorporating experiences?1. PASS Process Group (PG) updates a policy based on feedback from projects at a monthly meeting.2. PASS PG notices a process step was poorly written and corrects it.3. PASS PG looks at how projects are using the templates and updates the templates.4. PASS PG improves the standard processes after analyzing appraisal metrics.5. PASS PG updates a process because of information found on the internet. 属于:1 3 4 不属于:2 5 2:如果是因为项目团队用了觉得写的不清晰:属于。大部分情况:不属于 3:根据别人使用的结果做修正、更新 Integrated Project Management Which PASS scenarios align with IPM?1. All PASS projects follow the standard process exactly as is.2. Projects can use their own processes and trace them to the PASS standard process.3. PASS provides a standard process and rules for tailoring.4. Once projects tailor the PASS standard process, it is called the projects’ standard process.5. If the customer says eliminate QA, but the standard process requires QA with no tailoring, it’s okay for PASS projects to tailor out QA to satisfy the customer. 234 1 是可以定制化的 5 某个SP中规定必须要有QA，所以QA必须有 Organizational Process Definition Match sample artifacts with OPD SPs.Sample Artifacts1) Instructions for when a process step can be deleted or modified2) Website for tools, templates, project examples, etc.3) Standard software that comes with all company computers4) Spiral lifecycle description5) Requirements processOPD SPsa) SP 1.1 Establish Standard Processesb) SP 1.2 Establish Lifecycle Model Descriptionsc) SP 1.3 Establish Tailoring Criteria and Guidelinesd) SP 1.5 Establish the Organization’s Process Assets Librarye) SP 1.6 Establish Work Environment Standards 1-c 2-d 3-e 4-b 5-a Organizational Training Match sample artifacts with OT SPs.Sample Artifacts1) Training classrooms2) Plan for 3-5 years in the future3) Analysis of course evaluations4) Plan that states PASS, not projects, will provide risk tool training5) Plan for the next yearOT SPsa) SP 1.1 Establish Strategic Training Needsb) SP 1.2 Determine Which Training Needs are the Responsibility of the Organizationc) SP 1.3 Establish an Organizational Training Tactical Pland) SP 1.4 Establish a Training Capabilitye) SP 2.3 Assess Training Effectiveness 1-d 2-a 3-e 4-b 5-c 量化的过程性能目标包括了质量，然而，为强调质量在CMMI产品套件中的重要性，在CMMI中使用“质量与过程性能目标”一词。在哪个地方也出现了其实不是并列关系，实际上是包含关系，仅仅是因为比较重要，所以拿出来说的情况 VER SG2 SG3:SG3包含SG2 同行评审只是一种验证的手段，但是太过重要所以放到了标准流程里面 持续集成 vs 大爆炸集成 大爆炸 问题：定位错误、查找错误困难 好处：如果模块质量高，这是最有效的集成方式 持续集成： 好处：定位错误简单 问题：代价较高（同一个测试用例会反复测试） 通过自动化手段缓解代价较高的问题 部分测试无法自动化实现，所以不可能持续集成完直接上线（持续集成无法代替集成测试） 变更记录 日期 内容 4.14 发布第二版 4.15 DAR新增一个知识点、对VER VAL的比较进行了补充、增加课堂提问“持续集成vs大爆炸集成”、REQM中新增知识点双向可跟踪、补充了对目标概览图作用的说明 4.16 PMC、MA、PPQA、TS、DAR、CAR新增知识点、CMMI与过程部分增加很多知识点","categories":[],"tags":[{"name":"lecture","slug":"lecture","permalink":"https://wym0120.github.io/tags/lecture/"}]},{"title":"[ISER] [STA] Bugs as deviant behavior: A general approach to inferring errors in systems code","slug":"paper/ISER/Software Testing and Analysis/sta-2","date":"2021-04-12T15:01:26.110Z","updated":"2021-04-12T15:01:26.110Z","comments":true,"path":"2021/04/12/paper/ISER/Software Testing and Analysis/sta-2/","link":"","permalink":"https://wym0120.github.io/2021/04/12/paper/ISER/Software%20Testing%20and%20Analysis/sta-2/","excerpt":"","text":"Abstract A major obstacle to finding program errors in a real system is knowing what correctness rules the system must obey. These rules are often undocumented or specified in an ad hoc manner. This paper demonstrates techniques that automatically extract such checking information from the source code itself, rather than the programmer, thereby avoiding the need for a priori knowledge of system rules. The cornerstone of our approach is inferring programmer \"beliefs\" that we then crosscheck for contra dictions. Beliefs are facts implied by code: a dereference of a pointer, p, implies a belief that p is nonnull, a call to \"tmlock(1)\" implies that 1 was locked, etc. For be liefs we know the programmer must hold, such as the pointer dereference above, we immediately flag contra dictions as errors. For beliefs that the programmer may hold, we can assume these beliefs hold and use a statistical analysis to rank the resulting errors from most to least likely. For example, a call to \"spin_lock\" followed once by a call to \"spin_tmlock\" implies that the programmer may have paired these calls by coincidence. If the pairing happens 999 out of 1000 times, though, then it is probably a valid belief and the sole deviation a probable error. The key feature of this approach is that it requires no a priori knowledge of truth: if two beliefs contradict, we know that one is an error without knowing what the correct belief is. Conceptually, our checkers extract beliefs by tailor ing rule \"templates\" to a system for example, finding all functions that fit the rule template \"&lt;a&gt; must be paired with &lt; b&gt;.\" We have developed six checkers that follow this conceptual framework. They find hundreds of bugs in real systems such as Linux and OpenBSD. From our experience, they give a dramatic reduction in the manual effort needed to check a large system. Com pared to our previous work , these template checkers find ten to one hundred times more rule instances and derive properties we found impractical to specify manually. 总体评价 Motivation 这篇文章基于的一个假设是人是很难寻找和归纳出对于一个程序什么是必须遵循的正确的法则，什么是应该遵循的法则。这并不是指人不能总结出一些法则，而是说在编码过程中很难强制机器去遵守。因此，希望能够自动提取出某段特定代码应该有什么样的约束，例如在使用指针的时候指针指向的对象必须非空，例如lock和unlock应该要成对出现。而在静态检查的过程中如果发现代码违背了这些最基本的一些应该遵守的法则，那么就认为是一个可能的错误。 ### Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Testing and Analysis","slug":"Software-Testing-and-Analysis","permalink":"https://wym0120.github.io/tags/Software-Testing-and-Analysis/"}]},{"title":"How to write and publish technical papers in English","slug":"report/english-writing","date":"2021-04-08T08:00:41.000Z","updated":"2021-04-12T15:01:26.111Z","comments":true,"path":"2021/04/08/report/english-writing/","link":"","permalink":"https://wym0120.github.io/2021/04/08/report/english-writing/","excerpt":"","text":"Paper Title Use fewest possible words Adequately describe the contents of the paper To be read by thousands of people. Few may read the entire paper. Choose all words in the title with great care Carefully manage their association from one with each other Abstract A sumary of the information in a document A single paragraph of 100-200 words Self contained, no bibliographic, figure, or table references No obscure abbreviations and acronyms Write the paper before writing the Abstarct Introduction Answer the question \"What was the problem?\" Why is it important Supply sufficient background information to allow the reader to understand and evaluate the results of the present study without needing to refer to previous on the topic. Provide the rationale for the present study (e.g. a motivating example). State briefly and clearly your purpose in writing the paper and your contributions. Choose references carefully to provide the most important background infomation. Results Answer the question \"What did you find?\" Experimental performance evaluation for system work Empirical study for user interaction work Complexity analysis for algorithm work Case studies with real world applications Discussion Answer the question \"What do these findings mean?\" Related Work Review most relevant work Comment on the similarity and differences of your work from them What makes your work unique and worth doing? Usually as Section 2, or second last section Conclusion and Future Work Answer the question \"What do you conclude?\" What actions need to be taken as future work? Any discussion of controversial issues Acknowledgements Give credit to individuals who have helped you Acknowledge funding agencies that have partially supported your work References Use statndard bibliographic style Be complete and consistent with sytle Use more recent and more influential papers Practices Read as many good papers as possible Adapt good sense of writing from good papers Write as many papers (in English) as possible Be serious with reviewers' comments and learn from them Collaborate with other researchers Volunteer to review papers Specific Rules A sentence should be under 3 lines in a single column or 5 lines in a double-column. Without comparison, do not use \"more\" or \"less\" Issues on passive voice ... 避免被动语态除非主语很明确，可以给系统一个名字让系统作为主语 不要总是用 \"we\"，可以加上半句 \"Having done this, we decide ...\" Issues on tense ... 过去时态用于描述过去的一个工作 将来时态只用在 future work 中 完成时只用在 conclusion 中 Typical Chinglish A lot of -&gt; Many or Much Actually -&gt; In fact Based on -&gt; unnecessary in many contexts Be considered as -&gt; Be considered Besides -&gt; Apart from (和 Except 不一样，后者是不包含， Except for 也是错误用法) Especially -&gt; Particularly, or In particular Firstly, ..., Secondly -&gt; First, ..., Second -&gt; Bullet list For \"A\" (noun), we (verb) it -&gt; We (verb) \"A\" Kind of -&gt; Type of Not only A, but also B -&gt; 除非真的想强调A和B不可或缺且互补，否则用and Painted with red color -&gt; Colored red Researches -&gt; 只有 Researchers 或者 Research Some -&gt; 你想说某些，因为你不知道哪些，所以delete它 (避免不能精确的字) Very -&gt; delete it! Want -&gt; Wish We can see from Figure X that -&gt; Figure X shows that Whole -&gt; Entire Common Phrases and Suggested Subsitutes For the reason why -&gt; Why Starting a sentence with \"And\" -&gt; delete \"And\" The authors are unaware of the fact that -&gt; The authors are unaware that Their alogorithm is a fast one -&gt; Their alogorithm is fast Try to -&gt; Attempt to","categories":[],"tags":[{"name":"writing","slug":"writing","permalink":"https://wym0120.github.io/tags/writing/"},{"name":"english","slug":"english","permalink":"https://wym0120.github.io/tags/english/"}]},{"title":"[Lecture Notes] Software Architecture","slug":"lecture/software-architecture/SA-notes","date":"2020-12-17T10:39:11.000Z","updated":"2021-04-12T15:01:26.107Z","comments":true,"path":"2020/12/17/lecture/software-architecture/SA-notes/","link":"","permalink":"https://wym0120.github.io/2020/12/17/lecture/software-architecture/SA-notes/","excerpt":"","text":"Introduction 科学和工程的本质区别：是否有人的参与。工程的本质上是改变这个世界 软件架构两个定义之间的区别与联系：SEI和IEEE的定义基本相同，IEEE更为宽泛，而多的定义是与外部环境的交互以及设计演进的指导原则。 为什么在设计当中需要抽象？ Use Case 会把四个视图结合起来 chapter1 正确的设计顺序： constarins -&gt; quality attributes -&gt; functionalty attributes Quality Attributes And Tactics Availability 描述 availability -&gt; 使用时间 ------------------------------------------------&gt; timeline ↑ ↑ ↑ ↑ failure detect correct restart Mean time between failures : restart - failure 高可用性：上面的三段时间都尽可能的小 -&gt; 缩短这些时间都可以提高可用性 缩短检测时间： 什么情况下使用ping/echo，什么情况下使用heartbeat? &gt; ping echo是双向的，heartbeat是单向的 &gt; 尽管heartbeat带宽更小，但是需要一直占用着资源，多用于长时间始终保持连接的，实时的监控 &gt; ping是只有需要的时候才去ping，不会始终占用着资源 volting:用三个detect技术来保持一致，这些detect可以用同样的实现也可以是不同的实现 缩短恢复时间 假设有两台机器，一台是primary / secondary Active redundancy / passive redundancy / spare active : 两个都在运行，随时可以切换，两台都进行同样的工作，只是忽略备用的输出 passive : 备用机器定期同步，开着但是不会进行相同的工作 spare : 定期打primary的快照，down了之后在secondary上恢复 这三个时间会逐渐变长（本质是资源换时间） #### Reliability","categories":[],"tags":[{"name":"lecture notes","slug":"lecture-notes","permalink":"https://wym0120.github.io/tags/lecture-notes/"}]},{"title":"transwarp-QA","slug":"transwarp","date":"2020-12-08T14:42:56.000Z","updated":"2021-04-12T15:01:26.113Z","comments":true,"path":"2020/12/08/transwarp/","link":"","permalink":"https://wym0120.github.io/2020/12/08/transwarp/","excerpt":"","text":"练习题库(一) 在 HDFS 服务中，为了保证 Name Node 高可用性的角色不包括 A. Data Node☑️ B. Journal Node C. ZKFC D. Zookeeper Namenode 在启动时自动进入安全模式，在安全模式阶段，说法错误的是 A. 安全模式目的是在系统启动时对数据有效性进行检查 B. 根据策略对数据块进行必要的复制或删除 C. 当数据块的上报数达到阈值时，会自动退出安全模式 D. 允许用户对文件系统进行读写操作☑️ 在集群中配置 HDFS 的副本数为 3，设置数据块大小为 128M，此时我们上传一份 64M 的数据文件，该数据文件占用 HDFS 空间大小为 A. 64M B. 128M C. 384M☑️ D. 192M 下列对 YARN 角色在集群中的作用描述正确的是 A. 集群资源管理☑️ B. 集群任务调度与管理☑️ C. 存储部分 HDFS 上的数据块 D. 以上都正确 在 Yarn 服务中，不包含以下哪种角色 A. ResourceManager B. NodeManager C. ApplicationMaster D. Contianer☑️ 下列计算框架中不属于分布式计算框架的是 A. MapReduce B. MATLAB☑️ C. SPARK D. Tez 以下关于外表和托管表描述正确的是 A. 外表的数据存储在本地，托管表的数据存储在 hdfs 上 B. 删除托管表只会删除 Inceptor 上的元数据不会删除数据文件，删除外表两者都会 被删除 C. 删除外表只会删除 Inceptor 上的元数据不会删除数据文件，删除托管表两者都会 被删除☑️ D. 删除托管表或外表，incepotr 上的元数据和数据文件都会被删除 以下对分桶表的描述正确的是 A. 分桶表通过改变数据的存储分布，对查询起到一定的优化作用☑️ B. 分桶键不能是表中的列 C. 分桶数应为素数 D. 事物表必须制定分桶，分桶字段可以被更新 以下关于 inceptor excutor 资源配置的说法正确的有 A. Excutor 资源配置 fixed 和 ratio 两种模式☑️ B. Excutor 内核数配置的是每个 excutor 所使用的逻辑 core 数量☑️ C. Excutor 内核数和内存配置比例一般为 1 core:2G memory☑️ D. Excutor 分布可以指定每个节点运行的 excutor 数量或 executor 在集群上运行的 总数量，但是不能指定运行的节点 假设使用场景中有如下查询语句 SELECT Sex, Region, COUNT(ID), AVG (Salary)FROM EmployeeWHERE Department = &#x27;IT&#x27;GROUP BY Sex, RegionORDER BY Sex, Region; 通过 holodesk 的 cube 和 index 手段对这种过滤率和聚合率高的业务进行优化，以下建表 正确的是 A.☑️ CREATE TABLE EmployeeTBLPROPERTIES (&#x27;cache&#x27; = &#x27;RAM&#x27;,&#x27;holodesk.index&#x27; = &#x27;Department&#x27;,&#x27;holodesk.dimension&#x27; = &#x27;Sex, Region&#x27;)B. CREATE TABLE EmployeeTBLPROPERTIES (&#x27;cache&#x27; = &#x27;RAM&#x27;,&#x27;holodesk.index&#x27; = &#x27;Sex, Region&#x27;&#x27;holodesk.dimension&#x27; = &#x27;Department&#x27; )C. CREATE TABLE Employee TBLPROPERTIES (&#x27;cache&#x27; = &#x27;&#x27;Department&#x27;&#x27;,&#x27;holodesk.index&#x27; = &#x27;Department&#x27;,&#x27;holodesk.dimension&#x27; = &#x27;Sex, Region&#x27;)D. CREATE TABLE Employee TBLPROPERTIES (&#x27;cache&#x27; = &#x27;RAM&#x27;,&#x27;holodesk.index&#x27; = &#x27;Department&#x27;,&#x27;holodesk.dimension&#x27; = &#x27;Sex&#x27; ) 关于 Hyperbase 全局索引的描述，哪些是正确的？ A. 核心是倒排表☑️ B. 全局索引概念是对应 Rowkey 这个“一级”索引☑️ C. 全局索引使用平衡二叉树 D. 全局索引使用 B+树检索数据☑️ 以下为 Hyperbase 分布式存储的最小单元的是 A. Region server B. Region☑️ C. StoreFile D. Store 以下有关 Hyperbase 说法正确的是 A. 数据类型丰富，支持 String. Int. Char 等类型 B. Key/value 系统，key 由 Row,Column Family,Column Qualifier 组成 C. Hyperbase 表中 rowkey 有序，按字典序降序排列 D. 以上说法都不正确☑️ 以下关于 StreamSQL 的概念描述正确的是 A. Stream 是数据流☑️ B. Streamjob 是对一个或多个 stream 进行计算并将结果写进一个流的任务 C. Application 是一个或多个 streamjob 的集合☑️ D. 以上说法都不正确 某交通部门通过使用流监控全市过往 24 小时各个卡口数据，要求每分钟更新一次， 原始流为 org_stream，以下实现正确的是 A. CREATE STREAMWINDOW traffic_stream AS SELECT * FROM original_streamSTREAM w1 AS (length &#x27;1&#x27; minute slide &#x27;24&#x27; hour);B. CREATE STREAM traffic_stream AS SELECT * FROM original_streamSTREAMWINDOW w1 AS (length &#x27;1&#x27; minute slide &#x27;24&#x27; hour);C.☑️ CREATE STREAM traffic_stream AS SELECT * FROM original_streamSTREAMWINDOW w1 AS (length &#x27;24&#x27; hour slide &#x27;1&#x27; minute);D. CREATE STREAM traffic_stream AS SELECT * FROM original_stream AS (length &#x27;24&#x27;second slide &#x27;1&#x27; minute); 以下不是 Zookeeper 的功能是 A. 配置管理 B. 集群管理 C. 分布式锁 D. 存储大量数据☑️ 以下服务需要与 zookeeper 进行通信的是 A. HMaster B. Active NameNode C. InceptorSQL D. Active ResourceManager☑️ 下列是关于 flume 和 sqoop 对比的描述，不正确的是 A. flume 主要用来采集日志而 sqoop 主要用来做数据迁移 B. flume 主要采集流式数据而 sqoop 主要用来迁移规范化数据☑️ C. flume 和 sqoop 都是分布式处理任务☑️ D. flume 主要用于采集多数据源小数据而 sqoop 用来迁移单数据源数据 有关使用 sqoop 抽取数据的原理的描述不正确的是 A. sqoop 在抽取数据的时候可以指定 map 的个数，map 的个数决定在 hdfs 生成的 数据文件的个数 B. sqoop 抽取数据是个多节点并行抽取的过程，因此 map 的个数设置的越多性能越好☑️ C. sqoop 任务的切分是根据 split 字段的（最大值-最小值）/map 数 D. sqoop 抽取数据的时候需要保证执行当前用户有权限执行相应的操作 sqoop 抽取数据时需要做一些数据转换的工作，下面说法不正确的是 A. --fields-terminated-by '\\01' 用来设置在 hdfs 生成的文件的分割符 B. --hive-drop-import-delims 用来设置在 hdfs 生成的文件的存储形式为列存储☑️ C. --null-string '\\N' 用来把所有的 String 类型的空值 转换成 hive 的 NULL 值 D. --null-non-string '\\N' 用来把非 String 类型的空值 转换成 hive 的 NULL 值 下列有关 flume 的描述不正确的是 A. flume 是 Apache 的一个子项目 B. flume 主要是一个日志采集，传输系统 C. flume 和 sqoop 功能相似，因此可以相互替代☑️ D. flume 可以同时采集集群内部和集群外部的日志数据 下列 sink 中哪些是 flume 不支持的 sink A. HDFS sink B. kafka sink C. memory sink☑️ D. file roll sink 以下对 ElasticSearch 描述不正确的是 A. ElasticSearch 是分布式全文搜索引擎 B. ElasticSearch 集群中分 master 和 data 节点 C. ElasticSearch 数据存储在 HDFS 上☑️ D. ElasticSearch 数据可以按 Shard 分布在不同的节点上 下列不属于 kafka 应用场景的是 A. 常规的消息收集 B. 网站活动性跟踪 C. 日志收集 D. 关系型数据库和大数据平台之间的数据迁移☑️ TDH 提供哪几种认证模式？ A. 所有服务使用简单认证模式——所有服务都无需认证即可互相访问☑️ B. 所有服务都启用 Kerberos 认证，用户要提供 Kerberos principal 和密码（或者keytab）来访问各个服务☑️ C. 所有服务都启用 Kerberos 同时 Inceptor 启用 LDAP 认证☑️ D. 所有服务都启用 LDAP 认证 以下对各组件的运维页面描述不正确的是 A. 通过 Name Node 的 50070 页面对 HDFS 进行监控 B. 通过 Resource Manager 的 8180 对 YARN 上运行的任务进行监控☑️ C. 通过 HMaster 的 60010 对 HBase 进行监控☑ D. 通过 Hue Server 的 8888 页面登入 Hue Inceptor server 服务无法启动时，该如何查看日志是 A. 查看 TDH manager 所在节点/var/log/inceptorsql/目录下的 hive-server2.log 日志 B. 查看 Inceptor server 所在节点/var/log/inceptorsql/目录下的 hive-server2.log 日志☑️ C. 查 看 Resource Manager 所 在 节 点 /var/log/Yarn/ 目 录 下 的 yarn-yarn-resourcemanager-poc-node1.log 日志 D. 查看任意节点/var/log/inceptorsql/目录下的 hive-server2.log 日志 以下对 Hadoop 组件的应用场景描述正确的是 A. Hive 主要用于构建大数据数仓，主要做批处理. 统计分析型业务☑️ B. Hbase 主要用于检索查询的 OLTP 业务☑️ C. ElasticSearch 主要用于全文检索的关键字查询业务☑️ D. Spark Streaming 主要用于实时数据的业务场景☑️ 以下不属于管理角色的是 A. Name Node B. HMaster C. Resource Manager D. Node Manager☑️ 下面哪些工作不属于集群预安装工作 A. 为集群中每个节点的安装操作系统 B. 选一个节点作为管理节点，修改其 /etc/hosts 文件 C. 安装 Transwarp Manager 管理界面 D. 配置集群安全模式☑️ 练习题库(二) 下列与 HDFS 有关的说法正确的是 A. HDFS DataNode 节点上的磁盘需要做 RAID1，用来保证数据的可靠性 B. HDFS 可以在磁盘之间通过 balance 操作，平衡磁盘之间的负载情况 C. HDFS 建议 DataNode 之间的数据盘个数. 容量大小不一致，以体现 HDFS 的负均 衡能力 D. 规划 HDFS 集群时，建议 Active NameNode 和 Standby NameNode 分配在不同机 架上☑️ 在 HDFS 服务中，为了保证 Name Node 高可用性的角色不包括 A. Data Node☑️ B. Journal Node C. ZKFC D. Zookeeper 在集群中配置 HDFS 的副本数为 3，设置数据块大小为 128M，此时我们上传一份 64M 的数据文件，该数据文件占用 HDFS 空间大小为 A. 64M B. 128M C. 384M☑️ D. 192M 在 Yarn 服务中，不包含以下哪种角色 A. ResourceManager B. NodeManager C. ApplicationMaster☑️ D. Contianer 下列有关 YRAN 中角色的描述不正确的是 A. ResourceManager 控制整个集群并管理基础计算资源的分配 B. NodeManager 管理每个节点的资源，管理抽象容器 C. NodeManager 负责调度当前节点的所有 ApplicationMaster☑️ D. ApplicationMaster 管理一个 YARN 内运行的应用程序的实例 Spark 与 MapReduce 对比，突出的优势不包括 A. 基于内存的计算，效率更高 B. Spark 能支持比 MapReduce 更多的应用场景 C. Spark 支持多种编程语言接口，框架开销更低 D. Spark 可以运行在 YARN 之上而 MapReduce 不能☑️ 以下关于外表和托管表描述正确的是 A. 外表的数据存储在本地，托管表的数据存储在 hdfs 上 B. 删除托管表只会删除 Inceptor 上的元数据不会删除数据文件，删除外表两者都会 被删除 C. 删除外表只会删除 Inceptor 上的元数据不会删除数据文件，删除托管表两者都会 被删除☑️ D. 删除托管表或外表，incepotr 上的元数据和数据文件都会被删除 导入数据经常会用到 LOAD 命令，以下关于 LOAD 的描述错误的是 A. 源数据文件存放于 hdfs 上，通过 load 命令加载数据文件，数据文件将被复制到 表目录下☑️ B. 目标表为分桶表时不能通过 load 命令加载数据 C. 目标表为分区表时不能通过 load 命令加载数据 D. 当元数据存放于本地时，需要通过指定 LOCAL 关键字 tableA 有 10G 的数据，tableB 有 100G 的数据，两个表通过共有的 id 列做关联查询 name 列，以下方式可以优化计算效率的是 A. select /+MAPJOIN(a)/ a.name,b.name from tableA a join tableB b on a.id=b.id B. select /+MAPJOIN(b)/ a.name,b.name from tableA a join tableB b on a.id=b.id C. 建表时将 tableA 和 tableB 根据 id 字段分相同数量的桶☑️ D. 建表时将 tableA 和 tableB 根据 name 字段分相同数量的桶 假设使用场景中有如下查询语句 SELECT Sex, Region, COUNT(ID), AVG (Salary)FROM EmployeeWHERE Department = &#x27;IT&#x27;GROUP BY Sex, RegionORDER BY Sex, Region; 通过 holodesk 的 cube 和 index 手段对这种过滤率和聚合率高的业务进行优化，以下建表 正确的是 A. ☑️CREATE TABLE EmployeeTBLPROPERTIES (&#x27;cache&#x27; = &#x27;RAM&#x27;,&#x27;holodesk.index&#x27; = &#x27;Department&#x27;,&#x27;holodesk.dimension&#x27; = &#x27;Sex, Region&#x27;)B. CREATE TABLE EmployeeTBLPROPERTIES (&#x27;cache&#x27; = &#x27;RAM&#x27;,&#x27;holodesk.index&#x27; = &#x27;Sex, Region&#x27;&#x27;holodesk.dimension&#x27; = &#x27;Department&#x27; )C. CREATE TABLE Employee TBLPROPERTIES (&#x27;cache&#x27; = &#x27;&#x27;Department&#x27;&#x27;,&#x27;holodesk.index&#x27; = &#x27;Department&#x27;,&#x27;holodesk.dimension&#x27; = &#x27;Sex, Region&#x27;)D. CREATE TABLE Employee TBLPROPERTIES (&#x27;cache&#x27; = &#x27;RAM&#x27;,&#x27;holodesk.index&#x27; = &#x27;Department&#x27;,&#x27;holodesk.dimension&#x27; = &#x27;Sex&#x27; ) 关于 Hyperbase 全局索引的描述，哪些是正确的？ A. 核心是倒排表☑️ B. 全局索引概念是对应 Rowkey 这个“一级”索引☑️ C. 全局索引使用平衡二叉树 D. 全局索引使用 B+树检索数据☑️ 以下不属于 Hyperbase 存储模型单位的是 A. table B. region☑️ C. StoreFile D. block 有关 Minor Compact 的描述正确的是 A. 一个 store 下的所有文件合并 B. 删除过期版本数据 C. 删除 delete marker 数据 D. 把多个 HFile 合成一个☑️ 以下的 stream 的描述不正确的是 A. Input 定义了如何从数据源读取数据 B. Derived stream 是对 stream 转换而来的，可分为单 batch 变形和多 batch 变形 C. 定义 Derived stream 后 stream 当即根据转换规则进行变形☑️ D. 窗口变形的长度必须是当前流的整数倍 某公司有部门 A. 部门 B…，各部门的源数据都取自于企业总线，要求部门内部共享 数据源，部门间做到资源隔离，以下设计合理的有 A. 部门里每个流任务起一个 application 管理 streamjob B. 每个部门起一个 application 管理本部门的 streamjob☑️ C. 公司起一个 application 管理所有的 streamjob D. 每个部门起一个 streamjob 管理本部门的 application Zookeeper 服务描述正确的是 A. Zookeeper 可以存储文件，所以它是用于存储大量数据信息的文件系统。 B. 它是集群的管理服务，总控节点间所有通信。 C. 它是分布式应用程序协调服务。☑️ D. 它是保存所有集群服务的元数据库。 我们可以通过 hue 图形化的操作 HDFS，hue 可以实现 hdfs 的 A. 创建目录☑️ B. 上传文件☑️ C. 直接查看文件☑️ D. 更改权限☑️ 通过 oozie workflow 调度 sqoop 任务，以下说法正确的是 A. 必须使用 sudo 用户 B. 确保对应的 jdbc 驱动正确上传到 hdfs 上☑️ C. Sqoop 导入的 hdfs 目录必须前提不存在☑️ D. 以上说法都对 有关使用 sqoop 抽取数据的原理的描述不正确的是 A. sqoop 在抽取数据的时候可以指定 map 的个数，map 的个数决定在 hdfs 生成的 数据文件的个数 B. sqoop 抽取数据是个多节点并行抽取的过程，因此 map 的个数设置的越多性能 越好☑️ C. sqoop 任务的切分是根据 split 字段的（最大值-最小值）/map 数 D. sqoop 抽取数据的时候需要保证执行当前用户有权限执行相应的操作 有关 sqoop 的参数说法不正确的是 A. --username 是必需参数 B. --m 大于 1 时，--split-by 参数是必需参数 C. --query 是执行 sqoop 操作的必需参数☑️ D. --field-terminated-by 用来指定在 hdfs 生成数据文件时的列分隔符 下列是关于 flume 和 sqoop 对比的描述，不正确的是 A. flume 主要用来采集日志而 sqoop 主要用来做数据迁移 B. flume 主要采集流式数据而 sqoop 主要用来迁移规范化数据 C. flume 和 sqoop 都是分布式处理任务☑️ D. flume 主要用于采集多数据源小数据而 sqoop 用来迁移单数据源数据 以下不属于 Flume 的 Source 类型的是 A. exec source B. file source☑️ C. spooling directory source D. kafka source 有关 Elasticsearch 特性描述有误的一项是 A. 分布式实时文件存储，可将每一个字段存入索引 B. 实时分析的分布式搜索引擎。 C. 支持插件机制，分词插件. 同步插件 D. 以上都不正确☑️ 下列不属于 kafka 应用场景的是 A. 常规的消息收集 B. 网站活动性跟踪 C. 日志收集 D. 关系型数据库和大数据平台之间的数据迁移☑️ TDH 提供哪几种认证模式？ A. 所有服务使用简单认证模式——所有服务都无需认证即可互相访问☑️ B. 所有服务都启用 Kerberos 认证，用户要提供 Kerberos principal 和密码（或者 keytab）来访问各个服务☑️ C. 所有服务都启用 Kerberos 同时 Inceptor 启用 LDAP 认证☑️ D. 所有服务都启用 LDAP 认证 在安装有 kerberos 服务的集群中如何切换用户 A. 不需要切换，所有用户都为服务公用用户，可以直接使用。 B. 直接使用 kinit 用户名称方式进行切换☑️ C. 必须先 destroy ，才能再使用 kinit 用户名称 方式登录 D. 以上都不正确 以下对 Transwarp Manager 描述不正确的是 A. Transwarp Manger 是 TDH 的管理运维平台 B. 通过 Transwarp Manager 的 8180 界面登入 C. 在 Transwarp Manager 上能启动和停止 Transwarp Agent 角色☑️ D. 在 Transwarp Manager 上能对 Inceptor 表进行赋权操作 以下对 Hadoop 组件的应用场景描述正确的是 A. Hive 主要用于构建大数据数仓，主要做批处理. 统计分析型业务☑️ B. Hbase 主要用于检索查询的 OLTP 业务☑️ C. ElasticSearch 主要用于全文检索的关键字查询业务☑️ D. Spark Streaming 主要用于实时数据的业务场景☑️ 某电信部门有 100 亿条用户过往使用通讯记录，现需要提供客户终端根据电话号精 确查询历史通讯，满足用户同时并发访问，则该表应该设计为 A. Hyperbase 表+全局索引☑️ B. Hyperbase 表+es 索引 C. Es 表+es 索引 D. 以上方式都可以 可以安装 TDH 的操作系统有？ A. SUSE SP2-SP3。☑️ B. Win7/Win10。 C. CentOS 6.3-6.5。☑️ D. REHL 6.3-6.5。☑️ 练习题库(三) 下列与 HDFS 有关的说法正确的是 A. HDFS DataNode 节点上的磁盘需要做 RAID1，用来保证数据的可靠性 B. HDFS 可以在磁盘之间通过 balance 操作，平衡磁盘之间的负载情况 C. HDFS 建议 DataNode 之间的数据盘个数. 容量大小不一致，以体现 HDFS 的负载 均衡能力 D. 规划 HDFS 集群时，建议 Active NameNode 和 Standby NameNode 分配在不同的 机架上☑️ NameNode 用于存储 HDFS 上数据块的元数据信息，它保存的数据形式是 A. block B. fsimage☑️ C. editlog☑️ D. blockid 在集群中配置 HDFS 的副本数为 3，设置数据块大小为 128M，此时我们上传一份 64M 的数据文件，该数据文件占用 HDFS 空间大小为 A. 64M B. 128M C. 384M☑️ D. 192M 下列对 YARN 角色在集群中的作用描述正确的是 A. 集群资源管理☑️ B. 集群任务调度与管理☑️ C. 存储部分 HDFS 上的数据块 D. 以上都正确 YARN 框架中，负责集群资源管理的组件是 A. ResourceManager☑️ B. NodeManager C. Container D. JobTracker MapReduce 计算框架的特点包括 A. 自动化并行和分布式计算 B. 出错容忍度高 C. 优先数据本地化计算 D. 以上都是☑️ 以下关于外表和托管表描述正确的是 A. 外表的数据存储在本地，托管表的数据存储在 hdfs 上 B. 删除托管表只会删除 Inceptor 上的元数据不会删除数据文件，删除外表两者都会 被删除 C. 删除外表只会删除 Inceptor 上的元数据不会删除数据文件，删除托管表两者都会 被删除☑️ D. 删除托管表或外表，incepotr 上的元数据和数据文件都会被删除 以下关于 Inceptor 数据倾斜场景正确的处理方式有 A. 对于数据倾斜的 SQL 重新跑一次即可解决 B. 剔除引起数据倾斜的数据，再重新执行 SQL C. 导入数据期间格式转换出现错误引起 null 过多，可以通过重新清理数据解决☑️ D. 将一起数据倾斜的数据和剩下的数据单独运行，再通过 union 合并的方式解决☑️ 以下关于 inceptor 日志信息描述正确的有 A. Inceptor server 日志存放于各节点的/var/log/inceptorsql[x]/hive-server.log☑️ B. 可以通过 inceptor server 4040 查看 SQL 错误日志☑️ C. Excutor 日志存放于 excutor 节点的/var/log/inceptorsql[x]/spark-excutor.log☑️ D. ExcutorGC 日志存放于 excutor 节点的/var/log/inceptorsql[x]/spark-excutor.gc.log☑️ 假设使用场景中有如下查询语句 SELECT Sex, Region, COUNT(ID), AVG (Salary)FROM EmployeeWHERE Department = &#x27;IT&#x27;GROUP BY Sex, RegionORDER BY Sex, Region; 通过 holodesk 的 cube 和 index 手段对这种过滤率和聚合率高的业务进行优化，以下建表 正确的是 A. ☑️CREATE TABLE EmployeeTBLPROPERTIES (&#x27;cache&#x27; = &#x27;RAM&#x27;,&#x27;holodesk.index&#x27; = &#x27;Department&#x27;,&#x27;holodesk.dimension&#x27; = &#x27;Sex, Region&#x27;)B. CREATE TABLE EmployeeTBLPROPERTIES (&#x27;cache&#x27; = &#x27;RAM&#x27;,&#x27;holodesk.index&#x27; = &#x27;Sex, Region&#x27;&#x27;holodesk.dimension&#x27; = &#x27;Department&#x27; )C. CREATE TABLE Employee TBLPROPERTIES (&#x27;cache&#x27; = &#x27;Department&#x27;,&#x27;holodesk.index&#x27; = &#x27;Department&#x27;,&#x27;holodesk.dimension&#x27; = &#x27;Sex, Region&#x27;)D. CREATE TABLE Employee TBLPROPERTIES (&#x27;cache&#x27; = &#x27;RAM&#x27;,&#x27;holodesk.index&#x27; = &#x27;Department&#x27;,&#x27;holodesk.dimension&#x27; = &#x27;Sex&#x27; ) 以下属于 HMaster 功能的是 A. 为 Region Server 分配 region☑️ B. 存储数据元信息 C. 对 region 进行 compact 操作 D. 管理用户对 table 的增删改查操作☑️ 有关 Minor Compact 的描述正确的是 A. 一个 store 下的所有文件合并 B. 删除过期版本数据 C. 删除 delete marker 数据 D. 把多个 HFile 合成一个☑️ 下列创建全局索引的语句，正确的是 A. add_index &#x27;t1&#x27;, &#x27;index_name&#x27;,&#x27;COMBINE_INDEX|INDEXED=f1:q1:9|rowKey:rowKey:10,UPDATE=true&#x27;B. add_global_index &#x27;t1&#x27;, &#x27;index_name&#x27;,&#x27;COMBINE_INDEX|INDEXED=f1:q1:9|rowKey:rowKey:10,UPDATE=true&#x27;☑️C. add_fulltext_index &#x27;t1&#x27;, &#x27;index_name&#x27;,&#x27;COMBINE_INDEX|INDEXED=f1:q1:9|rowKey:rowKey:10,UPDATE=true&#x27;;D. create_global_index &#x27;t1&#x27;, &#x27;index_name&#x27;,&#x27;COMBINE_INDEX|INDEXED=f1:q1:9|rowKey:rowKey:10,UPDATE=true&#x27; 以下对流处理计算框架描述不正确的是 A. Spark Streaming 是基于微批（batch）对数据进行处理的 B. Apache Storm 是基于时间（event）对数据进行处理的 C. Transwarp StreamSQL 可基于微批或事件对数据进行处理 D. 以上说法都不对☑️ 某交通部门通过使用流监控全市过往 24 小时各个卡口数据，要求每分钟更新一次， 原始流为 org_stream，以下实现正确的是 A. CREATE STREAMWINDOW traffic_stream AS SELECT * FROM original_streamSTREAM w1 AS (length &#x27;1&#x27; minute slide &#x27;24&#x27; hour);B. CREATE STREAM traffic_stream AS SELECT * FROM original_streamSTREAMWINDOW w1 AS (length &#x27;1&#x27; minute slide &#x27;24&#x27; hour);C. ☑️CREATE STREAM traffic_stream AS SELECT * FROM original_streamSTREAMWINDOW w1 AS (length &#x27;24&#x27; hour slide &#x27;1&#x27; minute);D. CREATE STREAM traffic_stream AS SELECT * FROM original_stream AS (length &#x27;24&#x27;second slide &#x27;1&#x27; minute); 以下不是 Zookeeper 的功能是 A. 配置管理 B. 集群管理 C. 分布式锁 D. 存储大量数据☑️ 关于 Hue 对 hive server 的支持度描述正确的是 A. 只支持 hive server1 B. 只支持 hive server2☑️ C. 同时支持 hive server1 和 hive server2 D. 只支持开启 LDAP 的 hive server2 以下关于 oozie 三个编辑器说法正确的是 A. bundle 构建在 workflow 工作方式之上，提供定时运行和触发运行任务的功能。 B. bundle 将多个 workflow 管理起来，这样我们只需提供一个 bundle 提交即可 C. workflow 是最简单的一种工作方式☑️ D. coordinator 可以包含一到多个 workflow☑️ 有关使用 sqoop 抽取数据的原理的描述不正确的是 A. sqoop 在抽取数据的时候可以指定 map 的个数，map 的个数决定在 hdfs 生成的 数据文件的个数 B. sqoop 抽取数据是个多节点并行抽取的过程，因此 map 的个数设置的越多性能 越好☑️ C. sqoop 任务的切分是根据 split 字段的（最大值-最小值）/map 数 D. sqoop 抽取数据的时候需要保证执行当前用户有权限执行相应的操作 下面与 sqoop 做数据迁移有关的描述不正确的是 A. sqoop 做数据迁移的主要瓶颈在网络带宽和 RDB 的 IO 限制 B. sqoop 抽取数据是个多节点并行抽取的过程，因此 map 的个数设置的越多性能越 好☑️ C. sqoop 抽取数据分为全量抽取和增量抽取两种 D. 当-m 大于 1 时，就必须要设置--split-by 字段 下列有关 flume 的描述不正确的是 A. flume 是 Apache 的一个子项目 B. flume 主要是一个日志采集，传输系统 C. flume 和 sqoop 功能相似，因此可以相互替代☑️ D. flume 可以同时采集集群内部和集群外部的日志数据 下列是关于 flume 和 sqoop 对比的描述，不正确的是 A. flume 主要用来采集日志而 sqoop 主要用来做数据迁移 B. flume 主要采集流式数据而 sqoop 主要用来迁移规范化数据 C. flume 和 sqoop 都是分布式处理任务☑️ D. flume 主要用于采集多数据源小数据而 sqoop 用来迁移单数据源数据 以下对 ElasticSearch 描述不正确的是 A. ElasticSearch 是分布式全文搜索引擎 B. ElasticSearch 集群中分 master 和 data 节点 C. ElasticSearch 数据存储在 HDFS 上☑️ D. ElasticSearch 数据可以按 Shard 分布在不同的节点上 下列不属于 kafka 应用场景的是 A. 常规的消息收集 B. 网站活动性跟踪 C. 日志收集 D. 关系型数据库和大数据平台之间的数据迁移☑️ TDH 提供哪几种认证模式？ A. 所有服务使用简单认证模式——所有服务都无需认证即可互相访问☑️ B. 所有服务都启用 Kerberos 认证，用户要提供 Kerberos principal 和密码（或者 keytab）来访问各个服务☑️ C. 所有服务都启用 Kerberos 同时 Inceptor 启用 LDAP 认证☑️ D. 所有服务都启用 LDAP 认证 以下属于 Guardian 的功能是 A. 用户管理☑️ B. 用户认证☑️ C. 审计☑️ D. 权限管理☑️ Inceptor server 服务无法启动时，该如何查看日志是 A. 查看 TDH manager 所在节点/var/log/inceptorsql/目录下的 hive-server2.log 日志 B. 查看 Inceptor server 所在节点/var/log/inceptorsql/目录下的 hive-server2.log 日志☑️ C. 查 看 Resource Manager 所 在 节 点 /var/log/Yarn/ 目 录 下 的 yarn-yarn-resourcemanager-poc-node1.log 日志 D. 查看任意节点/var/log/inceptorsql/目录下的 hive-server2.log 日志 以下对 Hadoop 组件的应用场景描述正确的是 A. Hive 主要用于构建大数据数仓，主要做批处理. 统计分析型业务☑️ B. Hbase 主要用于检索查询的 OLTP 业务☑️ C. ElasticSearch 主要用于全文检索的关键字查询业务☑️ D. Spark Streaming 主要用于实时数据的业务场景☑️ 现有一个表数据要存储在 hyperbase 上，并创建全文索引，原表数据 10GB，HDFS 配置为 3 副本，hyperbase 压缩比例按 1:3 计算，索引数据量为 20GB，ES 副本数为 1， ES 压缩比按 1:3 计算，则该表需要多大的存储空间存储 A. 16.67GB B. 23.33GB☑️ C. 30GB D. 70GB 下面哪些工作不属于集群预安装工作 A. 为集群中每个节点的安装操作系统 B. 选一个节点作为管理节点，修改其/etc/hosts 文件 C. 安装 Transwarp Manager 管理界面 D. 配置集群安全模式☑️ 练习题库(四) 下列与 HDFS 有关的说法正确的是 A. HDFS DataNode 节点上的磁盘需要做 RAID1，用来保证数据的可靠性 B. HDFS 可以在磁盘之间通过 balance 操作，平衡磁盘之间的负载情况 C. HDFS 建议 DataNode 之间的数据盘个数. 容量大小不一致，以体现 HDFS 的负载 均衡能力 D. 规划 HDFS 集群时，建议 Active NameNode 和 Standby NameNode 分配在不同的 机架上☑️ 以下哪个服务作为 HDFS 高可靠协调服务的共享存储？ A. ZooKeeper B. JournalNodes☑️ C. NameNode D. ZKFailoverController 在集群中配置 HDFS 的副本数为 3，设置数据块大小为 128M，此时我们上传一份 64M 的数据文件，该数据文件占用 HDFS 空间大小为 A. 64M B. 128M C. 384M☑️ D. 192M 在 Yarn 服务中，不包含以下哪种角色 A. ResourceManager B. NodeManager C. ApplicationMaster D. Contianer☑️ ResourceManager 是 YARN 的主要组成部分，有关其功能描述不正确的是 A. 它直接将集群所拥有的资源按需分配给运行在 YARN 上的应用程序☑️ B. 它负责将集群中的所有资源进行统一管理和分配 C. 它接受各个节点的资源汇报信息 D. 它把资源按照策略分配给各应用 当前用户提交了一个 wordcount 词频统计的任务，最后任务执行失败，可能的原因有 哪些 A. 当前集群中没有足够的资源，不足以满足当前 wordcount 任务的需求 B. 执行该任务的用户没有权限访问 HDFS 上的数据文件 C. 用户在执行任务之前在 HDFS 相应的目录下创建了提交任务时指定的输出目录 D. 以上原因都有可能☑️ 以下关于外表和托管表描述正确的是 A. 外表的数据存储在本地，托管表的数据存储在 hdfs 上 B. 删除托管表只会删除 Inceptor 上的元数据不会删除数据文件，删除外表两者都会 被删除 C. 删除外表只会删除 Inceptor 上的元数据不会删除数据文件，删除托管表两者都会 被删除☑️ D. 删除托管表或外表，incepotr 上的元数据和数据文件都会被删除 SQL 运行中如果出现 maptask 数据特别多，执行时间又很短时可以通过小文件合并来 进行优化，以下是合并参数有 A. SET ngmr.partition.automerge = TRUE;☑️ B. SET ngmr.partition.mergesize = n;☑️ C. SET ngmr.partition.mergesize.mb = m;☑️ D. SET mapred.reduce.tasks = N; 以下关于 inceptor 日志信息描述正确的有 A. Inceptor server 日志存放于各节点的/var/log/inceptorsql[x]/hive-server.log☑️ B. 可以通过 inceptor server 4040 查看 SQL 错误日志☑️ C. Excutor 日志存放于 excutor 节点的/var/log/inceptorsql[x]/spark-excutor.log☑️ D. ExcutorGC 日志存放于 excutor 节点的/var/log/inceptorsql[x]/spark-excutor.gc.log☑️ tableA 有 10G 的数据，tableB 有 100G 的数据，两个表通过共有的 id 列做关联查询 name 列，以下方式可以优化计算效率的是 A. select /+MAPJOIN(a)/ a.name,b.name from tableA a join tableB b on a.id=b.id B. select /+MAPJOIN(b)/ a.name,b.name from tableA a join tableB b on a.id=b.id C. 建表时将 tableA 和 tableB 根据 id 字段分相同数量的桶☑️ D. 建表时将 tableA 和 tableB 根据 name 字段分相同数量的桶 以下属于 HMaster 功能的是 A. 为 Region Server 分配 region☑️ B. 存储数据元信息☑️ C. 对 region 进行 compact 操作 D. 管理用户对 table 的增删改查操作 Hyperbase 与 Inceptor 的关系，描述正确的是 A. 两者不可或缺，Inceptor 保证 Hyperbase 的服务的正常运行 B. 两者没有任何关系 C. Inceptor 可以访问 Hyperbase☑️ D. 两者相辅相成☑️ 下列创建全局索引的语句，正确的是 A. add_index &#x27;t1&#x27;, &#x27;index_name&#x27;,&#x27;COMBINE_INDEX|INDEXED=f1:q1:9|rowKey:rowKey:10,UPDATE=true&#x27;B. ☑️add_global_index &#x27;t1&#x27;, &#x27;index_name&#x27;,&#x27;COMBINE_INDEX|INDEXED=f1:q1:9|rowKey:rowKey:10,UPDATE=true&#x27;C. add_fulltext_index &#x27;t1&#x27;, &#x27;index_name&#x27;,&#x27;COMBINE_INDEX|INDEXED=f1:q1:9|rowKey:rowKey:10,UPDATE=true&#x27;D. create_global_index &#x27;t1&#x27;, &#x27;index_name&#x27;,&#x27;COMBINE_INDEX|INDEXED=f1:q1:9|rowKey:rowKey:10,UPDATE=true&#x27; 以下对流处理计算框架描述不正确的是 A. Spark Streaming 是基于微批（batch）对数据进行处理的 B. Apache Storm 是基于时间（event）对数据进行处理的 C. Transwarp StreamSQL 可基于微批或事件对数据进行处理 D. 以上说法都不对☑️ 某交通部门通过使用流监控全市过往 24 小时各个卡口数据，要求每分钟更新一次， 原始流为 org_stream，以下实现正确的是 A. CREATE STREAMWINDOW traffic_stream AS SELECT * FROM original_streamSTREAM w1 AS (length &#x27;1&#x27; minute slide &#x27;24&#x27; hour);B. CREATE STREAM traffic_stream AS SELECT * FROM original_streamSTREAMWINDOW w1 AS (length &#x27;1&#x27; minute slide &#x27;24&#x27; hour);C. ☑️CREATE STREAM traffic_stream AS SELECT * FROM original_streamSTREAMWINDOW w1 AS (length &#x27;24&#x27; hour slide &#x27;1&#x27; minute);D. CREATE STREAM traffic_stream AS SELECT * FROM original_stream AS (length &#x27;24&#x27;second slide &#x27;1&#x27; minute); Zookeeper 服务描述正确的为 A. Zookeeper 中每一个 server 互为 leader。 B. Zookeeper 中只有一个 leader，并通过备份机制产生。 C. Zookeeper 中不存在 leader,所有 server 共同提供服务。 D. Zookeeper 通过选举机制确定 leader，有且仅有一个。☑️ 通过 Hue 修改 HDFS 目录或文件的权限可以通过以下哪些方式实现 A. Hdfs 相应的权限☑️ B. 通过 Hue 超级用户 hue 登录 C. 以 hdfs 用户登录☑️ D. 以上都可以 通过 Oozie 使用 ssh，必须满足以下条件 A. 以 root 用户登录各个节点 B. Oozie 用户可以免密钥登录☑️ C. Oozie 用户必须要有 bash 权限☑️ D. 所访问必须是集群的节点 有关使用 sqoop 抽取数据的原理的描述不正确的是 A. sqoop 在抽取数据的时候可以指定 map 的个数，map 的个数决定在 hdfs 生成的 数据文件的个数 B. sqoop 抽取数据是个多节点并行抽取的过程，因此 map 的个数设置的越多性能 越好☑️ C. sqoop 任务的切分是根据 split 字段的（最大值-最小值）/map 数 D. sqoop 抽取数据的时候需要保证执行当前用户有权限执行相应的操作 在使用 sqoop 连接关系型数据时，下面哪个命令可以查看关系型数据库中有哪些表？ A. sqoop list-databases--username root--password 111111--connect jdbc:mysql:&#x2F;&#x2F;192.168.164.25:3306&#x2F;B. sqoop list-databases--username root-P--connect jdbc:mysql:&#x2F;&#x2F;192.168.164.25:3306&#x2F;C. sqoop list-databases--username root--password-file file:&#x2F;root&#x2F;.pwd--connect jdbc:mysql:&#x2F;&#x2F;192.168.164.25:3306&#x2F;D. ☑️sqoop list-tables--username root--password 111111--connect jdbc:mysql:&#x2F;&#x2F;192.168.164.25:3306&#x2F;test 要将采集的日志数据作为 kafka 的数据源，则 flume sink 需要设置为下列哪项参数 A. hdfs B. kafka C. org.apache.flume.sink.kafka.KafkaSink☑️ D. {topicname} 下列是关于 flume 和 sqoop 对比的描述，不正确的是 A. flume 主要用来采集日志而 sqoop 主要用来做数据迁移 B. flume 主要采集流式数据而 sqoop 主要用来迁移规范化数据 C. flume 和 sqoop 都是分布式处理任务☑️ D. flume 主要用于采集多数据源小数据而 sqoop 用来迁移单数据源数据 有关 Elasticsearch 描述有误的一项是 A. 它会利用多播形式发现节点。 B. 主节点(master node) 通过选举方式产生。 C. 主节点(master node)进行集群的管理，只负责集群节点添加和删除。☑️ D. 主节点会去读集群状态信息，必要的时候进行恢复工作。 下面措施中，不能保证 kafka 数据可靠性的是 A. kafka 会将所有消息持久化到硬盘中保证其数据可靠性 B. kafka 通过 Topic Partition 设置 Replication 来保证其数据可靠性 C. kafka 通过设置消息重发机制保证其数据可靠性 D. kafka 无法保证数据可靠性☑️ TDH 提供哪几种认证模式？ A. 所有服务使用简单认证模式——所有服务都无需认证即可互相访问☑️ B. 所有服务都启用 Kerberos 认证，用户要提供 Kerberos principal 和密码（或者keytab）来访问各个服务☑️ C. 所有服务都启用 Kerberos 同时 Inceptor 启用 LDAP 认证☑️ D. 所有服务都启用 LDAP 认证 开启 LDAP 后，应该使用哪个命令连接 Inceptor A. transwarp -t -h \\(ip。 B. beeline -u jdbc:hive2://\\)ip:10000 -n $username -p \\(password。☑️ C. beeline -u &quot;jdbc:hive2://\\)ip:10000/default;principal=hive/node1@TDH\"。 D. beeline -u \"jdbc:hive2://$ip:10000/default;principal=user1@TDH\"。 Inceptor server 服务无法启动时，该如何查看日志是 A. 查看 TDH manager 所在节点/var/log/inceptorsql/目录下的 hive-server2.log 日志 B. 查看 Inceptor server 所在节点/var/log/inceptorsql/目录下的 hive-server2.log 日志☑️ C. 查 看 Resource Manager 所 在 节 点 /var/log/Yarn/ 目 录 下 的yarn-yarn-resourcemanager-poc-node1.log 日志 D. 查看任意节点/var/log/inceptorsql/目录下的 hive-server2.log 日志 现有一批数据需要进行清洗，要求对其中 null 通过 update 转换为 0，删除重复的记 录，添加部分新的记录，则该表应该设计为 A. Tex 表 B. Orc 表 C. Orc 事务表☑️ D. Holodesk 表 现有一个表数据要存储在 hyperbase 上，并创建全文索引，原表数据 10GB，HDFS 配置为 3 副本，hyperbase 压缩比例按 1:3 计算，索引数据量为 20GB，ES 副本数为 1， ES 压缩比按 1:3 计算，则该表需要多大的存储空间存储 A. 16.67GB B. 23.33GB☑️ C. 30GB D. 70GB 下面哪些工作不属于集群预安装工作 A. 为集群中每个节点的安装操作系统 B. 选一个节点作为管理节点，修改其 /etc/hosts 文件 C. 安装 Transwarp Manager 管理界面 D. 配置集群安全模式☑️ 问答题 集群有 8 个节点，每个节点有 8 块硬盘（默认 3 副本）。如果某个节点有 3 块盘损坏，是否可能存在数据块丢失情况；如果有 3 个节点发生故障，是否可能存在数据块丢失情况；并简述原因。 请描述 TDH 平台中在 Yarn 上可以使用哪几种调度策略，并分别阐述各调度策略的特点。 FIFO Scheduler（先进先出调度器）：(策略)将所有任务放入一个队列，先进队列的先获得资源，排在后面的任务只有等待。(缺点)－资源利用率低，无法交叉运行任务。－灵活性差。Capacity Scheduler（容量调度器）：(思想)提前做预算，在预算指导下分享集群资源。(策略)集群资源由多个队列分享。每个队列都要预设资源分配的比例（提前做预算）。空闲资源优先分配给“实际资源&#x2F;预算资源”比值最低的队列。队列内部采用FIFO调度策略。(特点)层次化的队列设计。容量保证：每个队列都要预设资源占比，防止资源独占。弹性分配：空闲资源可以分配给任何队列，当多个队列争用时，会按比例进行平衡。支持动态管理。访问控制。多租户：多用户共享集群资源。Fair Scheduler（公平调度器）：（调度策略)多队列公平共享集群资源。通过平分的方式，动态分配资源，无需预先设定资源分配比例。队列内部可配置调度策略：FIFO、Fair（默认）。 请描述一个 100GB 文件写入 HDFS 的整个过程（使用 bulkload 方式实现） 抽取：从数据源中抽取数据对于MySQL，运行mysqldump命令导出数据转换：利用MapReduce，将数据转换为HFile文件对于TSV或CSV文件，使用HBase ImportTsv工具将其转换成HFile文件 －每个输出文件夹中的每个区域都会创建一个HFile文件加载：将HFile文件加载到HBase利用HBase CompleteBulkLoad工具，将HFile文件移动到HBase表的相应目录中，完成加载具体来说：1)客户端发送创建文件指令给分布式文件系统2)文件系统告知namenode (检查权限，查看文件是否存在。EditLog增加记录。返回输出流对象)3)客户端往输出流中写入数据,分成一个个数据包4)根据namenode分配,输出流往datanode写数据(多个datanode构成一个管道pipeline,输出流写第一个,后面的转发)4)每个datanode写完一个块后，返回确认信息5)写完数据，关闭输出流6)发送完成信号给namenode 请以 WordCount 为例描述 MapReduce 的运行过程，并列出 Spark 相较 MapReduce 的 优势 过程：todo优势：基于内存计算RDD;基于DAG优化任务流程(延迟计算);易于部署,更低的框架开销;丰富的API支持。 写出以下场景下的优化思路 假设在 Inceptor 上执行任务，发现 Map Task 数量多、执行时间短，应采取哪种措施来提升性能？ 对数据块进行合并：Automerge（碎片自动合并） 请简述在 Inceptor 中大表与大表做 join、大表与小表做 join 时分别有哪些优化手段 大表与大表的普通JOIN：实现普通JOIN的过程是这样的：扫描过滤两张表的数据（Map Stages），然后通过Shuffle将Key哈希值相同的数据分发到各个节点，在各节点内部执行JOIN（Reduce Stages）MapJoin是一种针对大表与小表JOIN的特殊实现方式，在大小表数据量悬殊的情况下能有效的提升JOIN执行效率，一般受优化开关或者Hint控制启动。 请列出 TDH 下的 4 大组件（Inceptor、Hyperbase、StreamSQL、Discover）的特性以及适用场景。 假设集群的每个节点初始有 6 块硬盘，运行一段时间后，每个节点又加了 4 块新硬盘， 为了使数据在所有硬盘上分布均匀，能否通过 hdfs balancer 达到效果，为什么？并列出能达到效果的两种措施。 不能，旧版本的hdfs仅支持节点间的数据平衡，新版本可通过balancer实现1.手动重写所有数据 2.将数据全部移到几个节点上，再在节点间数据平衡 请描述高并发检索和综合搜索的场景特点，这两种场景应使用哪种技术来做支撑， 并指出数据和索引各自的存储位置。 请描述 HDFS 的高可用性实现机制 请列举出平台支持的 5 种存储格式/引擎的表，并详细描述各自的存储特点、使用场景、支持的操作以及是否支持分区分桶 Text 表：ORC 表：事务表：HoloDesk 表：Hyperbase 表：","categories":[],"tags":[]},{"title":"[课堂笔记] 高级软件设计","slug":"lecture/software-design/SD-notes","date":"2020-11-12T06:33:15.000Z","updated":"2021-04-12T15:01:26.107Z","comments":true,"path":"2020/11/12/lecture/software-design/SD-notes/","link":"","permalink":"https://wym0120.github.io/2020/11/12/lecture/software-design/SD-notes/","excerpt":"","text":"基本概念 设计模式的定义 在软件工程中，设计模式是一种在特定上下文中应对反复出现的问题的可重用的通用的解决方案 设计模式的分类 模式类图 策略模式 ### 状态模式 ### 观察者模式 ### 装饰者模式 ### 工厂方法模式 ### 抽象工厂模式 ### 命令模式 ### 适配器模式 ### 外观模式 ### 模版模式 ### 迭代器模式 ### 组合模式 ### 单例模式 ### 代理模式 题目 模式体现什么设计原则 意图汇总 模式 意图 策略 定义一系列算法，封装每个算法，并使它们可互换。策略允许算法独立于使用它的客户机而变化。 状态 允许对象在内部状态发生改变时改变它的行为 观察者 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新 装饰者 允许向一个现有的对象添加新的功能，同时又不改变其结构 工厂 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行 抽象工厂 提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类 命令 将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化 适配器 将一个类的接口转换成客户希望的另外一个接口 外观 为高层模块提供一个一致的接口访问多个复杂的子系统 模版 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤 迭代器 提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示 组合 将对象组合成树形结构以表示\"部分-整体\"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性 单例 保证一个类仅有一个实例，并提供一个访问它的全局访问点 代理 为其他对象提供一种代理以控制对这个对象的访问 设计原则 Principles Encapsulate what varies. Favor composition over inheritance. Program to interfaces, not implementations. Strive for loosely coupled designs between objects that interact. The Open-Closed Principle ：Classes should be open for extension, but closed for modification Dependency Inversion Principle ：Depend upon abstractions. Do not depend upon concrete classes. The Hollywood Principle ：Don’t call me, we’ll call you Single Responsibility ：A class should have only one reason to change Principle of Least Knowledge ：talk only to your immediate friends ⚠️以下分类不一定完全正确仅代表个人观点 思考题 好莱坞原则与依赖倒置的关系 依赖倒置原则强调尽可能避免使用具体类，而多使用抽象。而好莱坞原则是让低层组件能够被 hook 进计算并且高层不依赖低层。两者的目的都是结偶，但是依赖倒置更加注重如何在设计中避免依赖 好莱坞原则中低层组建不可以调用高层组建中的方法吗？ 不完全是，低层会调用高层中继承来的方法。好莱坞原则要避免的是高层和低层之间的环形依赖 透明的组合模式和安全的组合模式之间的tradeoff 透明的组合模式：客户不去了解具体实现，采用一致处理，牺牲安全性安全的组合模式：先判断再处理，牺牲透明性 不同模式之间的比较 比较策略模式和状态模式 - 策略模式是定义一个算法家族，把他们封装起来，使得他们之间可以相互替换- 状态模式是将一个个状态封装成一个个类，当内部状态发生改变时，改变他们的行为- 策略模式和状态模式的类图几乎一样，策略模式中，客户端知道具体的策略有哪些，客户端能够通过setStrategy方法来动态的设置具体使用哪个策略，状态模式中，客户端不知道内部状态是怎么变化的，状态模式通过状态转移来组合State对象，最后把行为呈现出来 比较策略模式和模版方法模式 - 策略模式和模版方法模式的共同点是都封装算法- 策略模式是定义算法家族，让他们之间可以相互替换，模版方法是针对一个算法流程，某个步骤的具体细节交给子类去实现。策略模式可以改变算法流程，使一个个步骤可以相互替换，模版方法模式算法流程是固定的- 策略模式使用组合来实现，模版方法模式使用继承来实现 比较适配器模式、外观模式、装饰者模式的意图 - 适配器模式是把一个类的接口转换成客户期望的接口，让原本接口不兼容的类兼容，适配器模式一般用于想要复用某个类的场景；外观模式是封装子系统，提供简单的子系统的入口，同时简化层间调用- 装饰者模式是动态的给被装饰者添加职责，主要目的是扩展功能- 对于装饰者和适配器，他们都属于包装模式，装饰者需要满足is-a关系，不管如何包装，都有共同的父类，而适配器主要解决兼容问题，不一定要统一父类 比较模版方法模式和工厂模式 工厂模式是模版方法的特殊实现，工厂里面的创建对象，就相当于只有一个步骤的模版方法模式，这个步骤交给子类去实现 比较装饰者模式和静态代理模式 - 装饰者模式是动态的给组件对象添加“职责”，更多的考虑功能的扩展，而代理模式控制对象的访问，也能做方法的增强- 装饰者模式中，客户端可以看到具体的装饰有哪些，而代理模式把对象的具体信息给隐藏了起来- 装饰者模式是把原始组件对象传入构造器中，代理模式是创建一个对象的实例","categories":[{"name":"Designing","slug":"Designing","permalink":"https://wym0120.github.io/categories/Designing/"}],"tags":[{"name":"lecture notes","slug":"lecture-notes","permalink":"https://wym0120.github.io/tags/lecture-notes/"}]},{"title":"[MIT Lecture] How to Speak","slug":"report/MIT-how-to-speck","date":"2020-10-21T07:48:02.000Z","updated":"2021-04-12T15:01:26.111Z","comments":true,"path":"2020/10/21/report/MIT-how-to-speck/","link":"","permalink":"https://wym0120.github.io/2020/10/21/report/MIT-how-to-speck/","excerpt":"","text":"如何开始一个talk 不要在一开始就使用一个玩笑作为开场: 因为大部分人在这个时候正在习惯你的用词、声音，或者正在调整笔记本电脑。而是应该使用一个Promise，告诉听众们他们会在接下一段时间中听到什么东西。 一些启发式的例子 cycle： 你应该重复三次左右去确保你的每个听众在被弄混乱的时候都能够意识到你要说的是什么，这是一个概率问题 build fence：把自己的想法包围起来以区分于其他人的想法、其它的工作，划定一个边界 verbal punctuation：划定一些里程碑/标志点一样的东西让听众可以快速的回忆起来之前的内容，从整体上面把握对talk的理解，就像一个outline一样的东西。也方便talker快速的回到某个点 question：谨慎的选择问题，一般会等待7秒钟 一些演讲的选择 time ： 11 AM 比较合适 place ： 尽量光线充足 cased ：提前适应场地 populated ： 场地大小要合适 board - 可以方便的使用图形 - 写字的速度和思考的速度接近 - 能找到放手的位置 props - 使用一些道具来让陈述更加有趣更加具有说服力 board 和 props 也许都能够让人更感受到所说的东西的存在，但是 ppt 做不到这个效果 ppt中的一些技巧 不要只是重复阅读ppt中的文字 每个透明度应该都只有很少的词，并且这些词应该易于阅读 不要有太多的字 尽量在ppt的旁边讲述，以免听众反复转移视线 去除掉无用的杂乱的背景、logo、去掉无用的单词，甚至可以去掉title（但是需要告知听众title） 用箭头代替激光笔、指挥棒 如何激励听众 talker对自己的演讲充满热情 Steps of giving a job talk / technical talk vision probelms approaches have done something 列举出来每一步需要做什么， 一些约束，怎么才能够完成这些事情 contributions","categories":[{"name":"report","slug":"report","permalink":"https://wym0120.github.io/categories/report/"}],"tags":[]},{"title":"Bridging the gap between AI and SE","slug":"report/school-report-1","date":"2020-10-19T05:58:17.000Z","updated":"2021-04-12T15:01:26.112Z","comments":true,"path":"2020/10/19/report/school-report-1/","link":"","permalink":"https://wym0120.github.io/2020/10/19/report/school-report-1/","excerpt":"","text":"background : 大量的软件开发过程中间产品 problem : 大量的噪音和数据具有异构性 key point : 把软件过程中产生的产品逆向来造各种各样的工具 + 机器来理解人的行为 -&gt; 智能软件开发 research topics: - intelligent code assistant - code completion - clone detection - API recommenddation - stackoverflow + API doc - knowledge graphbased api misuse detection - automated answer - interactive query refinement for technical question retrieval - intelligent bug management and fixing - feature engineering for invalid bug determination - just in time defect identification and localization(data from github) - automatic document generation - code summarization - code comment updating - commit message generation - pull request generation - hunman-centric software engineering - predicting coding context - development intention and behavior research methodology: empirical study -&gt; (intelligent tools &lt;-&gt; empirical study)","categories":[{"name":"report","slug":"report","permalink":"https://wym0120.github.io/categories/report/"}],"tags":[]},{"title":"Citrine: Providing Intelligent Copy-and-Paste","slug":"paper/copy-and-paste-1","date":"2020-09-25T06:27:31.000Z","updated":"2021-04-12T15:01:26.111Z","comments":true,"path":"2020/09/25/paper/copy-and-paste-1/","link":"","permalink":"https://wym0120.github.io/2020/09/25/paper/copy-and-paste-1/","excerpt":"","text":"Abstract keywords: 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[]},{"title":"Types and Programming Languages notes","slug":"lecture/fspl/tpl-notes","date":"2020-09-25T05:59:52.000Z","updated":"2021-04-12T15:01:26.105Z","comments":true,"path":"2020/09/25/lecture/fspl/tpl-notes/","link":"","permalink":"https://wym0120.github.io/2020/09/25/lecture/fspl/tpl-notes/","excerpt":"","text":"ch3 Untyped Arithmetic Expressions","categories":[],"tags":[]},{"title":"[ISER] [SEP] Automating string processing in spreadsheets using input-output examples","slug":"paper/ISER/Software Engineering Process/sep-5","date":"2020-09-18T10:56:03.000Z","updated":"2021-04-12T15:01:26.109Z","comments":true,"path":"2020/09/18/paper/ISER/Software Engineering Process/sep-5/","link":"","permalink":"https://wym0120.github.io/2020/09/18/paper/ISER/Software%20Engineering%20Process/sep-5/","excerpt":"","text":"Abstract keywords: 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Engineering Process","slug":"Software-Engineering-Process","permalink":"https://wym0120.github.io/tags/Software-Engineering-Process/"}]},{"title":"[ISER] [SEP] code2vec: Learning distributed representations of code","slug":"paper/ISER/Software Engineering Process/sep-4","date":"2020-09-18T10:48:08.000Z","updated":"2021-04-12T15:01:26.109Z","comments":true,"path":"2020/09/18/paper/ISER/Software Engineering Process/sep-4/","link":"","permalink":"https://wym0120.github.io/2020/09/18/paper/ISER/Software%20Engineering%20Process/sep-4/","excerpt":"","text":"Abstract keywords: 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Engineering Process","slug":"Software-Engineering-Process","permalink":"https://wym0120.github.io/tags/Software-Engineering-Process/"}]},{"title":"[ISER] [SME] Ten years of implementation and experience","slug":"paper/ISER/Software Maintenance and Evolution/sme-4","date":"2020-09-18T10:26:42.000Z","updated":"2021-04-12T15:01:26.110Z","comments":true,"path":"2020/09/18/paper/ISER/Software Maintenance and Evolution/sme-4/","link":"","permalink":"https://wym0120.github.io/2020/09/18/paper/ISER/Software%20Maintenance%20and%20Evolution/sme-4/","excerpt":"","text":"Abstract keywords: 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Maintence and Evolution","slug":"Software-Maintence-and-Evolution","permalink":"https://wym0120.github.io/tags/Software-Maintence-and-Evolution/"}]},{"title":"[ISER] [SME] A technique for cheap recovery","slug":"paper/ISER/Software Maintenance and Evolution/sme-3","date":"2020-09-18T10:26:39.000Z","updated":"2021-04-12T15:01:26.110Z","comments":true,"path":"2020/09/18/paper/ISER/Software Maintenance and Evolution/sme-3/","link":"","permalink":"https://wym0120.github.io/2020/09/18/paper/ISER/Software%20Maintenance%20and%20Evolution/sme-3/","excerpt":"","text":"Abstract keywords: 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Maintence and Evolution","slug":"Software-Maintence-and-Evolution","permalink":"https://wym0120.github.io/tags/Software-Maintence-and-Evolution/"}]},{"title":"[ISER] [SME] Simplifying and isolating failure-inducing input","slug":"paper/ISER/Software Maintenance and Evolution/sme-2","date":"2020-09-18T10:26:36.000Z","updated":"2021-04-12T15:01:26.110Z","comments":true,"path":"2020/09/18/paper/ISER/Software Maintenance and Evolution/sme-2/","link":"","permalink":"https://wym0120.github.io/2020/09/18/paper/ISER/Software%20Maintenance%20and%20Evolution/sme-2/","excerpt":"","text":"Abstract Given some test case, a program fails. Which circumstances of the test case are responsible for the particular failure? The Delta Debugging algorithm generalizes and simplifies some failing test case to a minimal test case that still produces the failure; it also isolates the difference between a passing and a failing test case. In a case study, the Mozilla web browser crashed after 95 user actions. Our prototype implementation automatically simplified the input to 3 relevant user actions. Likewise, it simplified 896 lines of HTML to the single line that caused the failure. The case study required 139 automated test runs, or 35 minutes on a 500 MHz PC. keywords: Terms—automated debugging, debugging aids, testing tools, combinatorial testing, diagnostics, tracing. 总体评价 Motivation 对于开发者们来说bug report有一个固有的矛盾，他们既希望report能够special且详尽，又希望report能够集中在关键的几个语句上以便定位bug和将类似的问题聚集在一起。这篇文章希望模拟人的思考逻辑通过二分的方法来定位到bug的存在。这篇文章通过ddmin的方法来找到一个最小的能够正好触发bug的集合和一个与它几乎一致但是略微不同的且不能触发bug的集合。来帮助开发者减少debug所消耗的时间。 Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Maintence and Evolution","slug":"Software-Maintence-and-Evolution","permalink":"https://wym0120.github.io/tags/Software-Maintence-and-Evolution/"}]},{"title":"[ISER] [SME] Visualization of test information to assist fault localization","slug":"paper/ISER/Software Maintenance and Evolution/sme-1","date":"2020-09-18T10:26:34.000Z","updated":"2021-04-12T15:01:26.109Z","comments":true,"path":"2020/09/18/paper/ISER/Software Maintenance and Evolution/sme-1/","link":"","permalink":"https://wym0120.github.io/2020/09/18/paper/ISER/Software%20Maintenance%20and%20Evolution/sme-1/","excerpt":"","text":"Abstract One of the most expensive and time-consuming components of the debugging process is locating the errors or faults. To locate faults, developers must identify statements involved in failures and select suspicious statements that might contain faults. This paper presents a new technique that uses visualization to assist with these tasks. The technique uses color to visually map the participation of each program statement in the out ome of the execution of the program with a test suite, onsisting of both passed and failed test cases. Based on this visual mapping, a user can inspe t the statements in the program, identify statements involved in failures, and locate potentially faulty statements. The paper also describes a prototype tool that implements our technique along with a set of empirical studies that use the tool for evaluation of the technique. The empirical studies show that, for the subject we studied, the technique can be eeffective in helping a user locate faults in a program. keywords: software visualization,fault localization,debugging,testing 总体评价 Motivation 人工定位bug是想当费事的事情，因此希望使用自动执行测试的办法在执行过程中使用不同的颜色以及颜色的不同深度来映射代码的可信程度，帮助用户来定位bug Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Maintence and Evolution","slug":"Software-Maintence-and-Evolution","permalink":"https://wym0120.github.io/tags/Software-Maintence-and-Evolution/"}]},{"title":"[ISER] [STA] AddressSanitizer: A fast address sanity checker","slug":"paper/ISER/Software Testing and Analysis/sta-4","date":"2020-09-18T10:24:23.000Z","updated":"2021-04-12T15:01:26.110Z","comments":true,"path":"2020/09/18/paper/ISER/Software Testing and Analysis/sta-4/","link":"","permalink":"https://wym0120.github.io/2020/09/18/paper/ISER/Software%20Testing%20and%20Analysis/sta-4/","excerpt":"","text":"Abstract Memory access bugs, including buffer overflows and uses of freed heap memory, remain a serious problem for programming languages like C and C++. Many memory error detectors exist, but most of them are either slow or detect a limited set of bugs, or both. This paper presents AddressSanitizer, a new memory error detector. Our tool finds out-of-bounds accesses to heap, stack, and global objects, as well as use-after-free bugs. It employs a specialized memory allocator and code instrumentation that is simple enough to be implemented in any compiler, binary translation system, or even in hardware. AddressSanitizer achieves efficiency without sacrificing comprehensiveness. Its average slowdown is just 73% yet it accurately detects bugs at the point of occurrence. It has found over 300 previously unknown bugs in the Chromium browser and many bugs in other software. 总体评价 Motivation 目前检测边界溢出和访问已释放问题的工具要么不够快要么开销太大（好简单粗暴 Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Testing and Analysis","slug":"Software-Testing-and-Analysis","permalink":"https://wym0120.github.io/tags/Software-Testing-and-Analysis/"}]},{"title":"[ISER] [STA] A lightweight, general system for finding serious storage system errors","slug":"paper/ISER/Software Testing and Analysis/sta-3","date":"2020-09-18T10:24:20.000Z","updated":"2021-04-12T15:01:26.110Z","comments":true,"path":"2020/09/18/paper/ISER/Software Testing and Analysis/sta-3/","link":"","permalink":"https://wym0120.github.io/2020/09/18/paper/ISER/Software%20Testing%20and%20Analysis/sta-3/","excerpt":"","text":"Abstract Storage systems such as file systems, databases, and RAID systems have a simple, basic contract: you give them data, they do not lose or corrupt it. Often they store the only copy, making its irrevocable loss almost arbitrarily bad. Unfortunately, their code is exceptionally hard to get right, since it must correctly recover from any crash at any program point, no matter how their state was smeared across volatile and persistent memory. This paper describes EXPLODE, a system that makes it easy to systematically check real storage systems for errors. It takes user-written, potentially system-specific checkers and uses them to drive a storage system into tricky corner cases, including crash recovery errors. EXPLODE uses a novel adaptation of ideas from model checking, a comprehensive, heavyweight formal verification technique, that makes its checking more systematic (and hopefully more effective) than a pure testing approach while being just as lightweight. EXPLODE is effective. It found serious bugs in a broad range of real storage systems (without requiring source code): three version control systems, Berkeley DB, an NFS implementation, ten file systems, a RAID system, and the popular VMware GSX virtual machine. We found bugs in every system we checked, 36 bugs in total, typically with little effort. keywords: 总体评价 Motivation 文件系统中会有各种各样的机制来预防崩溃，而如果这些机制中也出现了bug，那会是十分严重的。但是目前已有的工作检测文件系统中的bug的方法还是非常的原始和低效的，因此就开发了一个新的工具（严重缺乏操作系统关于文件系统的知识，很多地方没看懂） ### Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Testing and Analysis","slug":"Software-Testing-and-Analysis","permalink":"https://wym0120.github.io/tags/Software-Testing-and-Analysis/"}]},{"title":"[ISER] [STA] Dynamically discovering likely program invariants to support program evolution","slug":"paper/ISER/Software Testing and Analysis/sta-1","date":"2020-09-18T10:24:15.000Z","updated":"2021-04-12T15:01:26.110Z","comments":true,"path":"2020/09/18/paper/ISER/Software Testing and Analysis/sta-1/","link":"","permalink":"https://wym0120.github.io/2020/09/18/paper/ISER/Software%20Testing%20and%20Analysis/sta-1/","excerpt":"","text":"Abstract Explicitly stated program invariants can help programmers by identifying program properties that must be preserved when modifying code. In practice, however, these invariants are usually implicit. An alternative to expecting programmers to fully annotate code with invariants is to automatically infer likely invariants from the program itself. This research focuses on dynamic techniques for discovering invariants from execution traces. This article reports three results. First, it describes techniques for dynamically discovering invariants,along with an implementation, named Daikon, that embodies these techniques. Second, it reports on theapplication of Daikon to two sets of target programs. In programs from Gries's work on program derivation,the system rediscovered prede ned invariants. In a C program lacking explicit invariants, the system discovered invariants that assisted a software evolution task. These experiments demonstrate that, at least forsmall programs, invariant inference is both accurate and useful. Third, it analyzes scalability issues such asinvariant detection runtime and accuracy as functions of test suites and program points instrumented. keywords: Program invariants, formal speci cation, software evolution, dynamic analysis, execution traces, logical inference, pattern recognition 总体评价 Motivation 不变式在程序开发的过程中是十分重要的，它能够保证程序不会因为修改代码而破坏原有的代码正确性。但是大多数时候不变式都是非显式的，这篇文章就想通过追踪变量值的变化来动态的推导出不变式。 Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Testing and Analysis","slug":"Software-Testing-and-Analysis","permalink":"https://wym0120.github.io/tags/Software-Testing-and-Analysis/"}]},{"title":"[课堂笔记] 软件工程研究入门","slug":"lecture/iser/iser-notes","date":"2020-09-18T02:10:16.000Z","updated":"2021-04-12T15:01:26.106Z","comments":true,"path":"2020/09/18/lecture/iser/iser-notes/","link":"","permalink":"https://wym0120.github.io/2020/09/18/lecture/iser/iser-notes/","excerpt":"","text":"Conduct Rigorous And Scientific Research 写作中的presentation 前后用词一致 类似句子不要换用句式 并排枚举的时候强制加上逗号 宾语从句里面也不要省略that，例如Suppose that / We assume that Research Formulation 整体上来说，做科研和写论文通常是一起进行的。 关键概念：必须先定义再使用，用数学上可表达或者机器可执行的形式去定义 非关键概念：尽量把它扔掉 在同一篇论文中每个概念都需要一个很明确的指代，而不能经常变换 Research Problem 需要有明确的定义的问题边界，不要over claim Motivating Example 找到一些有区分度的例子——已有工作在这个例子中不能做，而我们的工作可以做 Inadequacy Of Related Work 只需要展示不同点，而不要去批判 Insight 最重要的点，为什么我们的工作比相关工作做的更好 Experimentation Experimentation 和 Case Study的区别：实验环节是可以控制变量的，并且是在一个实验室的环境中。case study是无法控制变量的，是在实际生产环境中的结果 Questions and Subjects 问题设置：在什么条件下通过什么途径在什么方面做得好 主体的选择是否具有代表性 Experimentation Design Variable Independent variables（factors） ： 类似与函数中的自变量 Dependent variables ：类似于函数中的应变量，是用于衡量实验结果的一些指标 Controlled variables ：由于难以控制因此一些被固定下来的值，但是这些值对实验不会产生决定性的影响 Threats to Validity constuct validity internal validity external validity concluusion validity todo：看一下原文 Exercise and discussion 回答为什么这些threats会影响实验数据但是为什么不会影响结论的正确性","categories":[],"tags":[{"name":"lecture notes","slug":"lecture-notes","permalink":"https://wym0120.github.io/tags/lecture-notes/"}]},{"title":"[课堂笔记] 程序设计语言的形式语义","slug":"lecture/fspl/fspl-notes","date":"2020-09-09T23:51:07.000Z","updated":"2021-04-12T15:01:26.105Z","comments":true,"path":"2020/09/10/lecture/fspl/fspl-notes/","link":"","permalink":"https://wym0120.github.io/2020/09/10/lecture/fspl/fspl-notes/","excerpt":"","text":"Introduction PL的核心：构建抽象，以程序语言为中心去解决计算问题 PL能做到的是什么 用形式化的方式去描述语言的结构和程序的作用 用一种更严格的方法的方法去证明程序的正确性 more than testing 如何定义语言的行为 operational / denotational / axiomatic semantics(操作 / 指称 / 公理语义) 数学基础 1. lambda 演算 - functional programming 函数式 - imperative programming 命令式 - declarative programming 声明式 coq inductive data type constructor 是用来构造的而不是计算的 &gt; Think about standard decimal numerals: the numeral [1] is not a computation; it's a piece of data. When we write [111] to mean the number one hundred and eleven, we are using [1] three times, to write down a concrete representation of a number. 如果对一个函数的传参不完整那么它还是一个函数，直到所有的参数都被获取到才会变成值 lambda calculus 一般一个lambda的程序就叫做一个term（项）或者叫做lambda表达式 todo：BNF范式 pure lambda calculus：(Terms) M,N ::= x | lambdax.M | M N 1. x: 默认用xyz等小写变量来表示程序变量 2. lambdax.M ： lambda抽象，例如 int f (int x)return x -&gt; lambdax.x 3. M N :lambda应用，例如 int f(int x){return x} ; f(3) -&gt; (lambdax.x) 3 4. 本身不接受3作为一个参数，但是可以用 | n扩展语义，还可以引入一些整数计算 表达式简化： 每一个lambda尽可能管到最右边 函数应用是左结合的 一个lambda abstraction中只有一个参数 自由变量，不能随意改名 约束变量，可以改名 求解约束变量的集合 bv(x) = empty bv(lambdax.M) = {x} ∪ bv(M) bv(M N) = bv(M) ∪ bv(N) substitution (lambdax.M)[N/M] = lambdax.M 原因 （lambdax.M）N -&gt; M[N/x] 这里直接的lambdax.M相当于 (lambdax.(lambdax.M))[N/x]，N代换的是前面的隐藏的x （相当于代换了形参，但是形参又是可以随便换名字的所以相当于什么都不做） \"-&gt;\"这个代表这 term x term 上的一个relation 合流性定理：选择一个 特定 的M' 并且选择 特定 的策略使得M1，M2都能通过0至多步到达它 两种化简的策略： normal order reduction：总是选择最左最外的（out-most）redex去做reduction，也就是最优先选择化简function body applicative order reduction：总是选择最左最内的（inner-most）redex去做reduction，也就是最优先选择化简参数。相比于normal order可能效率更低因为参数不一定会被使用到 Simply-Typed Lambda calculus 一竖一横 \\(\\vdash\\) 表示是否能推出来 一竖两横 \\(\\models\\) 表示含义 Value v::constants | \\(\\lambda x.M\\) | &lt;v...v&gt; | left v | right v Value无法继续做reduction, Value 也是具备类型的 Curry-Howard Isomorphism \"命题就是类型，证明就是程序\" 如何知道一个类型是非空的，即这个集合中至少存在一个term满足该类型？ 根据Curry-Howard同构来替换 Example可以从后往前看，“如果我们要证明这个，那么我们应该首先获得这个前提...” 项的定型过程就是命题的证明过程，因此可以把项本身就做一个证明 STLC只和constructive propositional logic对应 STLC中没有一个closed term能够定型出 𝜌+(𝜌→𝜎) Operational Semantics operational semantics 操作语义：指明了程序该如何运行 denotational semanticcs 指称语义：总是把程序指称到一个域上 axiomatic semantics 公理语义：howel logic small-step \\((c,\\sigma)\\rightarrow(c&#39;,\\sigma)\\) big-step \\((c,\\sigma)\\implies(c&#39;,\\sigma)\\) 我们认为state是variable到生活中的n的映射，即我们会对这些符号赋予含义 contextual semantics 见pdf标注","categories":[{"name":"FSPL","slug":"FSPL","permalink":"https://wym0120.github.io/categories/FSPL/"}],"tags":[{"name":"lecture notes","slug":"lecture-notes","permalink":"https://wym0120.github.io/tags/lecture-notes/"}]},{"title":"[ISER] [SEP] A Three-Year Participant Observation of Software Startup Software Evolution","slug":"paper/ISER/Software Engineering Process/sep-3","date":"2020-08-27T11:42:51.000Z","updated":"2021-04-12T15:01:26.109Z","comments":true,"path":"2020/08/27/paper/ISER/Software Engineering Process/sep-3/","link":"","permalink":"https://wym0120.github.io/2020/08/27/paper/ISER/Software%20Engineering%20Process/sep-3/","excerpt":"","text":"Abstract keywords: 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Engineering Process","slug":"Software-Engineering-Process","permalink":"https://wym0120.github.io/tags/Software-Engineering-Process/"}]},{"title":"[ISER] [SEP] A study of developer work habits","slug":"paper/ISER/Software Engineering Process/sep-2","date":"2020-08-27T11:42:48.000Z","updated":"2021-04-12T15:01:26.109Z","comments":true,"path":"2020/08/27/paper/ISER/Software Engineering Process/sep-2/","link":"","permalink":"https://wym0120.github.io/2020/08/27/paper/ISER/Software%20Engineering%20Process/sep-2/","excerpt":"","text":"Abstract keywords: 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Engineering Process","slug":"Software-Engineering-Process","permalink":"https://wym0120.github.io/tags/Software-Engineering-Process/"}]},{"title":"[ISER] [SEP] Development and evaluation of a model of programming errors","slug":"paper/ISER/Software Engineering Process/sep-1","date":"2020-08-19T13:47:52.000Z","updated":"2021-04-12T15:01:26.109Z","comments":true,"path":"2020/08/19/paper/ISER/Software Engineering Process/sep-1/","link":"","permalink":"https://wym0120.github.io/2020/08/19/paper/ISER/Software%20Engineering%20Process/sep-1/","excerpt":"","text":"Abstract Models of programming and debugging suggest many causes of errors, and many classifications of error types exist. Yet, there has been no attempt to link causes of errors to these classifications, nor is there a common vocabulary for reasoning about such causal links. This makes it difficult to compare the abilities of programming styles, languages, and environments to prevent errors. To address this issue, this paper presents a model of programming errors based on past studies of errors. The model was evaluated with two observational of Alice, an event-based programming system, revealing that most errors were due to attentional and strategic problems in implementing algorithms, language constructs, and uses of libraries. In general, the model can support theoretical, design, and educational programming research. 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Software Engineering Process","slug":"Software-Engineering-Process","permalink":"https://wym0120.github.io/tags/Software-Engineering-Process/"}]},{"title":"[ISER] [EMSE] Why we refactor? Confessions of GitHub contributors","slug":"paper/ISER/Empirical Software Engineering/emse-5","date":"2020-08-19T13:20:06.000Z","updated":"2021-04-12T15:01:26.108Z","comments":true,"path":"2020/08/19/paper/ISER/Empirical Software Engineering/emse-5/","link":"","permalink":"https://wym0120.github.io/2020/08/19/paper/ISER/Empirical%20Software%20Engineering/emse-5/","excerpt":"","text":"Abstract keywords: 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Empirical Software Engineering","slug":"Empirical-Software-Engineering","permalink":"https://wym0120.github.io/tags/Empirical-Software-Engineering/"}]},{"title":"[ISER] [EMSE] Understanding integer overflow in C/C++","slug":"paper/ISER/Empirical Software Engineering/emse-2","date":"2020-08-19T13:19:55.000Z","updated":"2021-04-12T15:01:26.108Z","comments":true,"path":"2020/08/19/paper/ISER/Empirical Software Engineering/emse-2/","link":"","permalink":"https://wym0120.github.io/2020/08/19/paper/ISER/Empirical%20Software%20Engineering/emse-2/","excerpt":"","text":"Abstract Integer overflow bugs in C and C++ programs are difficult to track down and may lead to fatal errors or exploitable vulner- abilities. Although a number of tools for finding these bugs exist, the situation is complicated because not all overflows are bugs. Better tools need to be constructed—but a thorough understanding of the issues behind these errors does not yet exist. We developed IOC, a dynamic checking tool for integer overflows, and used it to conduct the first detailed empirical study of the prevalence and patterns of occurrence of integer overflows in C and C++ code. Our results show that intentional uses of wraparound behaviors are more common than is widely believed; for example, there are over 200 distinct locations in the SPEC CINT2000 benchmarks where overflow occurs. Although many overflows are intentional, a large number of accidental overflows also occur. Orthogonal to programmers’ intent, overflows are found in both well-defined and undefined flavors. Applications executing undefined operations can be, and have been, broken by improvements in compiler optimizations. Looking beyond SPEC, we found and reported undefined integer overflows in SQLite, PostgreSQL, SafeInt, GNU MPC and GMP, Firefox, LLVM, Python, BIND, and OpenSSL; many of these have since been fixed. keywords: integer overflow, integer wraparound, undefined behavior 总体评价 Motivation C / C++中并非所有的溢出都是bug，有一些是故意为之的，但是目前没有工具能够检测这一点，原因如下： - 本身对bit和byte级别的操作在C和C++中都是非常常见的，数学计算与位运算的界限模糊 - C和C++中对有符号数的规定中包含了UB - 开发者容易误用带符号数和无符号数 Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Empirical Software Engineering","slug":"Empirical-Software-Engineering","permalink":"https://wym0120.github.io/tags/Empirical-Software-Engineering/"}]},{"title":"[ISER] [EMSE] Where Do Developers Log? An Empirical Study on Logging Practices in Industry","slug":"paper/ISER/Empirical Software Engineering/emse-4","date":"2020-08-15T06:44:06.000Z","updated":"2021-04-12T15:01:26.108Z","comments":true,"path":"2020/08/15/paper/ISER/Empirical Software Engineering/emse-4/","link":"","permalink":"https://wym0120.github.io/2020/08/15/paper/ISER/Empirical%20Software%20Engineering/emse-4/","excerpt":"","text":"Abstract System logs are widely used in various tasks of software system management. It is crucial to avoid logging too little or toomuch. To achieve so, developers need to make informed decisions on where to log and what to log in their logging practices during development. However, there exists no work on studying such logging practices in industry or helping developers makeinformed decisions. To fill this significant gap, in this paper, wesystematically study the logging practices of developers in industry, with focus on where developers log. We obtain six valuable findings by conducting source code analysis on twolarge industrial systems (2.5M and 10.4M LOC, respectively) at Microsoft. We further validate these findings via aquestionnaire survey with 54 experienced developers in Microsoft. Inaddition, our study demonstrates the high accuracy of up to 90% F-Scorein predicting where to log. keywords: Logging practice, automatic logging, developer survey 总体评价 Motivation Evalution Details 研究主要关心的问题 RQ1: 被log的代码片段主要有哪些分类 手动分类的结果： 类别 特征 开发者们认为的常见程度 Assertion-check logging The logging statement is triggered by an Assert statement. 50% Return-value-check logging The logging statement is contained in a clause following a branch statement (e.g., if, if-else, switch), while one or more function return values are checked in the branchcondition. In addition, the logging statement is not enclosed by any catch block within the cl 63% Exception logging The logging statement is contained either in a catch block or right before a throw statement. 80% Logic-branch logging The logging statement is contained in a clause following a branch statement (e.g., if, if-else, switch), while the branch con- dition does not contain any check on a functionreturn value 67% Observing-point logging All the other situations that exclude the above categories 81% 总的来说可以归纳成两个分类，一种是用来记录意料之外的异常情况，一种是用来记录关键的执行点。而巧合的是在对开发者进行的调查中，Exception logging 和 Observing-point logging 也被认为是最常见的两种 log 通过工具自动分类的结果： RQ2: 代码会因为哪些原因被log RQ3: 是否存在某种途径能够自动决定log的位置","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Empirical Software Engineering","slug":"Empirical-Software-Engineering","permalink":"https://wym0120.github.io/tags/Empirical-Software-Engineering/"}]},{"title":"[ISER] [EMSE] On the Naturalness of Software","slug":"paper/ISER/Empirical Software Engineering/emse-3","date":"2020-08-12T12:01:51.000Z","updated":"2021-04-12T15:01:26.108Z","comments":true,"path":"2020/08/12/paper/ISER/Empirical Software Engineering/emse-3/","link":"","permalink":"https://wym0120.github.io/2020/08/12/paper/ISER/Empirical%20Software%20Engineering/emse-3/","excerpt":"","text":"Abstract Abstract—Natural languages like English are rich, complex, and powerful. The highly creative and graceful use of languages like English and Tamil, by masters like Shakespeare and Avvai yar, can certainly delight and inspire. But in practice, given cognitive constraints and the exigencies of daily life, most humanutterances are far simpler and much more repetitive and pre dictable. In fact, these utterances can be very usefully modeled using modern statistical methods. This fact has led to the phenomenal success of statistical approaches to speech recognition, natural language translation, question-answering, and text mining and comprehension. We begin with the conjecture that most software is also natural, in the sense that it is created by humans at work, with all the attendant constraints and limitations—and thus, like natural language, it is also likely to be repetitive and predictable. Wethen proceed to ask whether a) code can be usefully modeled bystatistical language models and b) such models can be leveragedto support software engineers. Using the widely adoptedn-grammodel, we provide empirical evidence supportive of a positiveanswer to both these questions. We show that code is also veryrepetitive, and in fact even more so than natural languages. Asan example use of the model, we have developed a simple codecompletion engine for Java that, despite its simplicity, alreadyimproves Eclipse’s completion capability. We conclude the paper by laying out a vision for future research in this area. keywords:language models; n-gram; nature language processing; code completion; code suggestion 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Empirical Software Engineering","slug":"Empirical-Software-Engineering","permalink":"https://wym0120.github.io/tags/Empirical-Software-Engineering/"}]},{"title":"[ISER] [EMSE] Learning from Mistakes — A Comprehensive Study on Real World Concurrency Bug Characteristics","slug":"paper/ISER/Empirical Software Engineering/emse-1","date":"2020-08-04T07:55:42.000Z","updated":"2021-04-12T15:01:26.107Z","comments":true,"path":"2020/08/04/paper/ISER/Empirical Software Engineering/emse-1/","link":"","permalink":"https://wym0120.github.io/2020/08/04/paper/ISER/Empirical%20Software%20Engineering/emse-1/","excerpt":"","text":"Abstract The reality of multi-core hardware has made concurrent programs pervasive. Unfortunately, writing correct concurrent programs is difficult. Addressing this challenge requires advances in multiple directions, including concurrency bug detection, concurrent pro gram testing, concurrent programming model design, etc. Design ing effective techniques in all these directions will significantly benefit from a deep understanding of real world concurrency bug characteristics. This paper provides the first (to the best of our knowledge) comprehensive real world concurrency bug characteristic study. Specifically, we have carefully examined concurrency bug patterns, manifestation, and fix strategies of 105 randomly selected real worldconcurrency bugs from 4 representative server and client opensource applications (MySQL, Apache, Mozilla and OpenOffice).Our study reveals several interesting findings and provides useful guidance for concurrency bug detection, testing, and concurrentprogramming language design. Some of our findings are as follows: (1) Around one third ofthe examined non-deadlock concurrency bugs are caused by violation to programmers’ order intentions, which may not be easilyexpressed via synchronization primitives like locks and transactional memories; (2) Around 34% of the examined non-deadlockconcurrency bugs involve multiple variables, which are not welladdressed by existing bug detection tools; (3) About 92% of theexamined concurrency bugs can be reliably triggered by enforcingcertain orders among no more than 4 memory accesses. This indicates that testing concurrent programs can target at exploring possible orders among every small groups of memory accesses, insteadof among all memory accesses; (4) About 73% of the examinednon-deadlock concurrency bugs were not fixed by simply addingor changing locks, and many of the fixes were not correct at thefirst try, indicating the difficulty of reasoning concurrent executionby programmers. keywords: concurrent program, concurrency bug, bug characteristics 总体评价 Motivation Evalution 成熟且庞大的开源项目，具备不同的并发的需求 MySQL Apache Mozilla OpenOffice 从bug database中根据关键词选取至少包含一个关键词的bug并从中抽取约500个比较详尽的（包含了引起bug的原因、源码、如何解决bug）信息，并且这些bug都是由于开发人员引起的。 最终获取到了105个并发bug ### Details #### BUG pattern 研究 产生原因：(1)编码时违反原子性，多个线程访问了同一个变量 (2)对线程之间的执行先后顺序存在错误的假设 BUG mainfestation 研究 可能影响可信度的因素 随机选取的bug，不够全面 选择的应用不一定具备足够的代表性","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Empirical Software Engineering","slug":"Empirical-Software-Engineering","permalink":"https://wym0120.github.io/tags/Empirical-Software-Engineering/"}]},{"title":"Jetbrains Report 重构？重写？","slug":"report/jetbrain-report","date":"2020-07-31T06:47:44.000Z","updated":"2021-04-12T15:01:26.111Z","comments":true,"path":"2020/07/31/report/jetbrain-report/","link":"","permalink":"https://wym0120.github.io/2020/07/31/report/jetbrain-report/","excerpt":"","text":"问题1: 长方法：不是一个很容易解决的问题 根源的原因：重复 重构过程中尽可能的去运行测试以免破坏任何的逻辑 工具：提取方法 问题2: 变量扎堆出现 -&gt; 多个变量同时表达了一个概念 工具：introduce parameter object 但是会引起一些比较长的调用逻辑 问题3： 用一个看起来简单的表示一个复杂的对象 -&gt; 为什么不直接用一个原来的来表示？ 问题4: 违反迪米特法则 -&gt; 提取方法，把逻辑封装起来","categories":[{"name":"report","slug":"report","permalink":"https://wym0120.github.io/categories/report/"}],"tags":[{"name":"coding","slug":"coding","permalink":"https://wym0120.github.io/tags/coding/"}]},{"title":"[ISER] [FM] Scalable multiline program patch synthesis via symbolic analysis","slug":"paper/ISER/Formal Methods/fm-4","date":"2020-07-25T01:51:35.000Z","updated":"2021-04-12T15:01:26.109Z","comments":true,"path":"2020/07/25/paper/ISER/Formal Methods/fm-4/","link":"","permalink":"https://wym0120.github.io/2020/07/25/paper/ISER/Formal%20Methods/fm-4/","excerpt":"","text":"Abstract We present MergePoint, a new binary-only symbolic execution system for large-scale testing of commodity off-the-shelf(COTS) software. MergePoint introduces veritesting, a newtechnique that employs static symbolic execution to amplifythe effect of dynamic symbolic execution. Veritesting allowsMergePoint to find twice as many bugs, explore orders of magnitude more paths, and achieve higher code coverage thanprevious dynamic symbolic execution systems. MergePointis currently running daily on a 100 node cluster analyzing33,248 Linux binaries; has generated more than 15 billionSMT queries, 200 million test cases, 2,347,420 crashes, andfound 11,687 bugs in 4,379 distinct applications. keywords: Veritesting, Symbolic Execution, Verification 总体评价 Motivation Evalution Details","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Formal Methods","slug":"Formal-Methods","permalink":"https://wym0120.github.io/tags/Formal-Methods/"}]},{"title":"[ISER] [FM] KLEE : Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs","slug":"paper/ISER/Formal Methods/fm-3","date":"2020-07-25T01:51:29.000Z","updated":"2021-04-12T15:01:26.108Z","comments":true,"path":"2020/07/25/paper/ISER/Formal Methods/fm-3/","link":"","permalink":"https://wym0120.github.io/2020/07/25/paper/ISER/Formal%20Methods/fm-3/","excerpt":"","text":"Abstract We present a new symbolic execution tool, KLEE, capable of automatically generating tests that achievehigh coverage on a diverse set of complex andenvironmentally-intensive programs. We used KLEE tothoroughly check all 89 standalone programs in theGNU COREUTILS utility suite, which form the coreuser-level environment installed on millions of Unix systems, and arguably are the single most heavily tested setof open-source programs in existence. KLEE-generatedtests achieve high line coverage — on average over 90%per tool (median: over 94%) — and significantly beatthe coverage of the developers’ own hand-written testsuite. When we did the same for 75 equivalent tools inthe BUSYBOX embedded system suite, results were evenbetter, including 100% coverage on 31 of them.We also used KLEE as a bug finding tool, applying it to 452 applications (over 430K total lines of code), whereit found 56 serious bugs, including three in COREUTILSthat had been missed for over 15 years. Finally, we usedKLEE to crosscheck purportedly identical BUSYBOX andCOREUTILS utilities, finding functional correctness errors and a myriad of inconsistencies. keywords: 总体评价 Contribution KLEE的优势： - 适用于大型项目 - 简洁的状态表示 - 启发式搜索算法获得高代码覆盖率 - 简洁直接的与环境交互的方法 Motivation 以往工具在大型项目上表现不佳 路径爆炸 与环境交互处理方式不当 ### Evalution Details 运行原理： KLEE的核心逻辑是一个解释器循环，它每次都选择一个state去执行并且把执行到的指令进行符号化，直到没有更多的state可以执行或者超过了规定的执行时间 KLEE的设计 symbolic process(state) : register file, stack, heap, pc,path condition todo Evalution部分还没有看，这部分实验很厉害，好好看一下","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Formal Methods","slug":"Formal-Methods","permalink":"https://wym0120.github.io/tags/Formal-Methods/"}]},{"title":"由pipeline和重定向引发的血案","slug":"lecture/os/interesting-bug-1","date":"2020-07-19T17:17:17.000Z","updated":"2021-04-12T15:01:26.106Z","comments":true,"path":"2020/07/20/lecture/os/interesting-bug-1/","link":"","permalink":"https://wym0120.github.io/2020/07/20/lecture/os/interesting-bug-1/","excerpt":"","text":"问题重现 因为想要去除某一段文本里面的所有换行，因此编写了一个脚本 #!/bin/bashcat $1 | tr &quot;\\n&quot; &quot; &quot; &gt; $1 然而这段脚本的执行并不如我预期中的那样能够把输出重定向回文件，而是反而清空了文件 StackOverflow上面的回答 https://stackoverflow.com/questions/3055005/is-it-ok-to-use-the-same-input-file-as-output-of-a-piped-command https://stackoverflow.com/questions/39426655/redirecting-the-cat-ouput-of-file-to-the-same-file All commands in a pipeline execute at the same time, and the shell prepares redirections before executing the commands. So, it is likely that the command will overwrite the file before cat reads it. 这个回答里涉及到了几点： 1. pipeline中各个进程的执行时机 2. 重定向、pipeline与指令之间的执行顺序 3. overwrite文件 执行时机 下面是两份strace log的执行结果，可以看到需要执行cat和tr的进程都是从sh的进程中clone出来的，的确是同时执行的，唯一的保证就是将前一个进程的输出成功的重定向到下一个进程的输入。这是由pipeline保证的。 man bash中提到 &gt; The standard output of command is connected via a pipe to the standard input of command2. This connection is performed before any redirections specified by the command. Before a command is executed, its input and output may be redirected using a special notation interpreted by the shell. 由此可以看出三者的执行顺序是 pipeline连接两个指令之间的标准输入和标准输出 &gt; 重定向 &gt; 指令执行 strace结果 清空了文件的strace log 9855 execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;cat 1-redirect | tr \\&quot;\\\\n\\&quot; \\&quot; \\&quot; &gt; 1&quot;...], 0x7ffce75660f8 /* 61 vars */) = 09855 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)9855 access(&quot;/etc/ld.so.preload&quot;, R_OK) = -1 ENOENT (No such file or directory)9855 openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 39855 fstat(3, &#123;st_mode=S_IFREG|0644, st_size=103311, ...&#125;) = 09855 close(3) = 09855 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)9855 openat(AT_FDCWD, &quot;/lib/x86_64-linux-gnu/libc.so.6&quot;, O_RDONLY|O_CLOEXEC) = 39855 read(3, &quot;\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\260\\34\\2\\0\\0\\0\\0\\0&quot;..., 832) = 8329855 fstat(3, &#123;st_mode=S_IFREG|0755, st_size=2030544, ...&#125;) = 09855 close(3) = 09855 arch_prctl(ARCH_SET_FS, 0x7f32b9ad0540) = 09855 getuid() = 10009855 getgid() = 10009855 getpid() = 98559855 rt_sigaction(SIGCHLD, &#123;sa_handler=0x558b265a3200, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f32b9511fd0&#125;, NULL, 8) = 09855 geteuid() = 10009855 getppid() = 98539855 stat(&quot;/home/wym0120/have-a-try&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 09855 stat(&quot;.&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 09855 geteuid() = 10009855 getegid() = 10009855 rt_sigaction(SIGINT, NULL, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 09855 rt_sigaction(SIGINT, &#123;sa_handler=0x558b265a3200, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f32b9511fd0&#125;, NULL, 8) = 09855 rt_sigaction(SIGQUIT, NULL, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 09855 rt_sigaction(SIGQUIT, &#123;sa_handler=SIG_DFL, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f32b9511fd0&#125;, NULL, 8) = 09855 rt_sigaction(SIGTERM, NULL, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 09855 rt_sigaction(SIGTERM, &#123;sa_handler=SIG_DFL, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f32b9511fd0&#125;, NULL, 8) = 09855 stat(&quot;/home/wym0120/.autojump/bin/cat&quot;, 0x7ffd51e78a30) = -1 ENOENT (No such file or directory)9855 stat(&quot;/usr/local/sbin/cat&quot;, 0x7ffd51e78a30) = -1 ENOENT (No such file or directory)9855 stat(&quot;/usr/local/bin/cat&quot;, 0x7ffd51e78a30) = -1 ENOENT (No such file or directory)9855 stat(&quot;/usr/sbin/cat&quot;, 0x7ffd51e78a30) = -1 ENOENT (No such file or directory)9855 stat(&quot;/usr/bin/cat&quot;, 0x7ffd51e78a30) = -1 ENOENT (No such file or directory)9855 stat(&quot;/sbin/cat&quot;, 0x7ffd51e78a30) = -1 ENOENT (No such file or directory)9855 stat(&quot;/bin/cat&quot;, &#123;st_mode=S_IFREG|0755, st_size=35064, ...&#125;) = 09855 pipe([3, 4]) = 09855 clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f32b9ad0810) = 98569855 close(4) = 09855 stat(&quot;/home/wym0120/.autojump/bin/tr&quot;, 0x7ffd51e78a30) = -1 ENOENT (No such file or directory)9855 stat(&quot;/usr/local/sbin/tr&quot;, 0x7ffd51e78a30) = -1 ENOENT (No such file or directory)9855 stat(&quot;/usr/local/bin/tr&quot;, 0x7ffd51e78a30) = -1 ENOENT (No such file or directory)9855 stat(&quot;/usr/sbin/tr&quot;, 0x7ffd51e78a30) = -1 ENOENT (No such file or directory)9855 stat(&quot;/usr/bin/tr&quot;, &#123;st_mode=S_IFREG|0755, st_size=47288, ...&#125;) = 09855 clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f32b9ad0810) = 98579855 close(3) = 09855 close(-1) = -1 EBADF (Bad file descriptor)9855 wait4(-1, &lt;unfinished ...&gt;9857 dup2(3, 0 &lt;unfinished ...&gt;9856 close(3 &lt;unfinished ...&gt;9857 &lt;... dup2 resumed&gt; ) = 09856 &lt;... close resumed&gt; ) = 09857 close(3 &lt;unfinished ...&gt;9856 dup2(4, 1 &lt;unfinished ...&gt;9857 &lt;... close resumed&gt; ) = 09856 &lt;... dup2 resumed&gt; ) = 19857 openat(AT_FDCWD, &quot;1-redirect&quot;, O_WRONLY|O_CREAT|O_TRUNC, 0666 &lt;unfinished ...&gt;9856 close(4) = 09857 &lt;... openat resumed&gt; ) = 39857 fcntl(1, F_DUPFD, 10 &lt;unfinished ...&gt;9856 execve(&quot;/bin/cat&quot;, [&quot;cat&quot;, &quot;1-redirect&quot;], 0x558b274b7fe8 /* 61 vars */ &lt;unfinished ...&gt;9857 &lt;... fcntl resumed&gt; ) = 109857 close(1) = 09856 &lt;... execve resumed&gt; ) = 09857 fcntl(10, F_SETFD, FD_CLOEXEC) = 09857 dup2(3, 1 &lt;unfinished ...&gt;9856 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK &lt;unfinished ...&gt;9857 &lt;... dup2 resumed&gt; ) = 19857 close(3 &lt;unfinished ...&gt;9856 &lt;... access resumed&gt; ) = -1 ENOENT (No such file or directory)9857 &lt;... close resumed&gt; ) = 09856 access(&quot;/etc/ld.so.preload&quot;, R_OK &lt;unfinished ...&gt;9857 execve(&quot;/usr/bin/tr&quot;, [&quot;tr&quot;, &quot;\\\\n&quot;, &quot; &quot;], 0x558b274b8268 /* 61 vars */ &lt;unfinished ...&gt;9856 &lt;... access resumed&gt; ) = -1 ENOENT (No such file or directory)9856 openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC &lt;unfinished ...&gt;9857 &lt;... execve resumed&gt; ) = 09856 &lt;... openat resumed&gt; ) = 39856 fstat(3, &#123;st_mode=S_IFREG|0644, st_size=103311, ...&#125;) = 09857 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)9856 close(3 &lt;unfinished ...&gt;9857 access(&quot;/etc/ld.so.preload&quot;, R_OK &lt;unfinished ...&gt;9856 &lt;... close resumed&gt; ) = 09857 &lt;... access resumed&gt; ) = -1 ENOENT (No such file or directory)9856 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK &lt;unfinished ...&gt;9857 openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC &lt;unfinished ...&gt;9856 &lt;... access resumed&gt; ) = -1 ENOENT (No such file or directory)9857 &lt;... openat resumed&gt; ) = 39856 openat(AT_FDCWD, &quot;/lib/x86_64-linux-gnu/libc.so.6&quot;, O_RDONLY|O_CLOEXEC &lt;unfinished ...&gt;9857 fstat(3, &lt;unfinished ...&gt;9856 &lt;... openat resumed&gt; ) = 39857 &lt;... fstat resumed&gt; &#123;st_mode=S_IFREG|0644, st_size=103311, ...&#125;) = 09856 read(3, &quot;\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\260\\34\\2\\0\\0\\0\\0\\0&quot;..., 832) = 8329857 close(3 &lt;unfinished ...&gt;9856 fstat(3, &lt;unfinished ...&gt;9857 &lt;... close resumed&gt; ) = 09856 &lt;... fstat resumed&gt; &#123;st_mode=S_IFREG|0755, st_size=2030544, ...&#125;) = 09857 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)9857 openat(AT_FDCWD, &quot;/lib/x86_64-linux-gnu/libc.so.6&quot;, O_RDONLY|O_CLOEXEC) = 39857 read(3, &quot;\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\260\\34\\2\\0\\0\\0\\0\\0&quot;..., 832) = 8329857 fstat(3, &#123;st_mode=S_IFREG|0755, st_size=2030544, ...&#125;) = 09856 close(3) = 09856 arch_prctl(ARCH_SET_FS, 0x7fc0f8b44540) = 09857 close(3) = 09857 arch_prctl(ARCH_SET_FS, 0x7f56e0751540) = 09856 openat(AT_FDCWD, &quot;/usr/lib/locale/locale-archive&quot;, O_RDONLY|O_CLOEXEC) = 39856 fstat(3, &#123;st_mode=S_IFREG|0644, st_size=3004224, ...&#125;) = 09856 close(3) = 09857 openat(AT_FDCWD, &quot;/usr/lib/locale/locale-archive&quot;, O_RDONLY|O_CLOEXEC &lt;unfinished ...&gt;9856 fstat(1, &lt;unfinished ...&gt;9857 &lt;... openat resumed&gt; ) = 39857 fstat(3, &lt;unfinished ...&gt;9856 &lt;... fstat resumed&gt; &#123;st_mode=S_IFIFO|0600, st_size=0, ...&#125;) = 09857 &lt;... fstat resumed&gt; &#123;st_mode=S_IFREG|0644, st_size=3004224, ...&#125;) = 09856 openat(AT_FDCWD, &quot;1-redirect&quot;, O_RDONLY) = 39856 fstat(3, &lt;unfinished ...&gt;9857 close(3 &lt;unfinished ...&gt;9856 &lt;... fstat resumed&gt; &#123;st_mode=S_IFREG|0644, st_size=0, ...&#125;) = 09857 &lt;... close resumed&gt; ) = 09856 fadvise64(3, 0, 0, POSIX_FADV_SEQUENTIAL &lt;unfinished ...&gt;9857 fadvise64(0, 0, 0, POSIX_FADV_SEQUENTIAL &lt;unfinished ...&gt;9856 &lt;... fadvise64 resumed&gt; ) = 09857 &lt;... fadvise64 resumed&gt; ) = -1 ESPIPE (Illegal seek)9857 read(0, &lt;unfinished ...&gt;9856 read(3, &quot;&quot;, 131072) = 09856 close(3) = 09856 close(1 &lt;unfinished ...&gt;9857 &lt;... read resumed&gt; &quot;&quot;, 8192) = 09856 &lt;... close resumed&gt; ) = 09857 close(0 &lt;unfinished ...&gt;9856 close(2 &lt;unfinished ...&gt;9857 &lt;... close resumed&gt; ) = 09856 &lt;... close resumed&gt; ) = 09857 close(1) = 09856 exit_group(0 &lt;unfinished ...&gt;9857 close(2 &lt;unfinished ...&gt;9856 &lt;... exit_group resumed&gt;) = ?9857 &lt;... close resumed&gt; ) = 09857 exit_group(0 &lt;unfinished ...&gt;9856 +++ exited with 0 +++9855 &lt;... wait4 resumed&gt; [&#123;WIFEXITED(s) &amp;&amp; WEXITSTATUS(s) == 0&#125;], 0, NULL) = 98569857 &lt;... exit_group resumed&gt;) = ?9855 --- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=9856, si_uid=1000, si_status=0, si_utime=0, si_stime=0&#125; ---9855 rt_sigreturn(&#123;mask=[]&#125;) = 98569855 wait4(-1, &lt;unfinished ...&gt;9857 +++ exited with 0 +++9855 &lt;... wait4 resumed&gt; [&#123;WIFEXITED(s) &amp;&amp; WEXITSTATUS(s) == 0&#125;], 0, NULL) = 98579855 --- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=9857, si_uid=1000, si_status=0, si_utime=0, si_stime=0&#125; ---9855 rt_sigreturn(&#123;mask=[]&#125;) = 98579855 exit_group(0) = ?9855 +++ exited with 0 +++ 能够顺利输出的strace log 10498 execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;cat 1-redirect | tr \\&quot;\\\\n\\&quot; \\&quot; \\&quot; &gt; 1&quot;...], 0x7ffebaf3b058 /* 61 vars */) = 010498 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)10498 access(&quot;/etc/ld.so.preload&quot;, R_OK) = -1 ENOENT (No such file or directory)10498 openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 310498 fstat(3, &#123;st_mode=S_IFREG|0644, st_size=103311, ...&#125;) = 010498 close(3) = 010498 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)10498 openat(AT_FDCWD, &quot;/lib/x86_64-linux-gnu/libc.so.6&quot;, O_RDONLY|O_CLOEXEC) = 310498 read(3, &quot;\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\260\\34\\2\\0\\0\\0\\0\\0&quot;..., 832) = 83210498 fstat(3, &#123;st_mode=S_IFREG|0755, st_size=2030544, ...&#125;) = 010498 close(3) = 010498 arch_prctl(ARCH_SET_FS, 0x7f27de8b8540) = 010498 getuid() = 100010498 getgid() = 100010498 getpid() = 1049810498 rt_sigaction(SIGCHLD, &#123;sa_handler=0x561b04ce9200, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f27de2f9fd0&#125;, NULL, 8) = 010498 geteuid() = 100010498 getppid() = 1049610498 stat(&quot;/home/wym0120/have-a-try&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 010498 stat(&quot;.&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 010498 geteuid() = 100010498 getegid() = 100010498 rt_sigaction(SIGINT, NULL, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 010498 rt_sigaction(SIGINT, &#123;sa_handler=0x561b04ce9200, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f27de2f9fd0&#125;, NULL, 8) = 010498 rt_sigaction(SIGQUIT, NULL, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 010498 rt_sigaction(SIGQUIT, &#123;sa_handler=SIG_DFL, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f27de2f9fd0&#125;, NULL, 8) = 010498 rt_sigaction(SIGTERM, NULL, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 010498 rt_sigaction(SIGTERM, &#123;sa_handler=SIG_DFL, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER, sa_restorer=0x7f27de2f9fd0&#125;, NULL, 8) = 010498 stat(&quot;/home/wym0120/.autojump/bin/cat&quot;, 0x7ffd8439c6d0) = -1 ENOENT (No such file or directory)10498 stat(&quot;/usr/local/sbin/cat&quot;, 0x7ffd8439c6d0) = -1 ENOENT (No such file or directory)10498 stat(&quot;/usr/local/bin/cat&quot;, 0x7ffd8439c6d0) = -1 ENOENT (No such file or directory)10498 stat(&quot;/usr/sbin/cat&quot;, 0x7ffd8439c6d0) = -1 ENOENT (No such file or directory)10498 stat(&quot;/usr/bin/cat&quot;, 0x7ffd8439c6d0) = -1 ENOENT (No such file or directory)10498 stat(&quot;/sbin/cat&quot;, 0x7ffd8439c6d0) = -1 ENOENT (No such file or directory)10498 stat(&quot;/bin/cat&quot;, &#123;st_mode=S_IFREG|0755, st_size=35064, ...&#125;) = 010498 pipe([3, 4]) = 010498 clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f27de8b8810) = 1049910498 close(4) = 010499 close(3 &lt;unfinished ...&gt;10498 stat(&quot;/home/wym0120/.autojump/bin/tr&quot;, &lt;unfinished ...&gt;10499 &lt;... close resumed&gt; ) = 010498 &lt;... stat resumed&gt; 0x7ffd8439c6d0) = -1 ENOENT (No such file or directory)10499 dup2(4, 1 &lt;unfinished ...&gt;10498 stat(&quot;/usr/local/sbin/tr&quot;, &lt;unfinished ...&gt;10499 &lt;... dup2 resumed&gt; ) = 110498 &lt;... stat resumed&gt; 0x7ffd8439c6d0) = -1 ENOENT (No such file or directory)10499 close(4 &lt;unfinished ...&gt;10498 stat(&quot;/usr/local/bin/tr&quot;, &lt;unfinished ...&gt;10499 &lt;... close resumed&gt; ) = 010499 execve(&quot;/bin/cat&quot;, [&quot;cat&quot;, &quot;1-redirect&quot;], 0x561b05f9afe8 /* 61 vars */ &lt;unfinished ...&gt;10498 &lt;... stat resumed&gt; 0x7ffd8439c6d0) = -1 ENOENT (No such file or directory)10498 stat(&quot;/usr/sbin/tr&quot;, &lt;unfinished ...&gt;10499 &lt;... execve resumed&gt; ) = 010498 &lt;... stat resumed&gt; 0x7ffd8439c6d0) = -1 ENOENT (No such file or directory)10498 stat(&quot;/usr/bin/tr&quot;, &#123;st_mode=S_IFREG|0755, st_size=47288, ...&#125;) = 010499 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK &lt;unfinished ...&gt;10498 clone( &lt;unfinished ...&gt;10499 &lt;... access resumed&gt; ) = -1 ENOENT (No such file or directory)10499 access(&quot;/etc/ld.so.preload&quot;, R_OK &lt;unfinished ...&gt;10498 &lt;... clone resumed&gt; child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f27de8b8810) = 1050010499 &lt;... access resumed&gt; ) = -1 ENOENT (No such file or directory)10498 close(3 &lt;unfinished ...&gt;10499 openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC &lt;unfinished ...&gt;10498 &lt;... close resumed&gt; ) = 010499 &lt;... openat resumed&gt; ) = 310498 close(-1 &lt;unfinished ...&gt;10499 fstat(3, &lt;unfinished ...&gt;10498 &lt;... close resumed&gt; ) = -1 EBADF (Bad file descriptor)10499 &lt;... fstat resumed&gt; &#123;st_mode=S_IFREG|0644, st_size=103311, ...&#125;) = 010498 wait4(-1, &lt;unfinished ...&gt;10499 close(3) = 010499 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)10499 openat(AT_FDCWD, &quot;/lib/x86_64-linux-gnu/libc.so.6&quot;, O_RDONLY|O_CLOEXEC) = 310499 read(3, &quot;\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\260\\34\\2\\0\\0\\0\\0\\0&quot;..., 832) = 83210499 fstat(3, &#123;st_mode=S_IFREG|0755, st_size=2030544, ...&#125;) = 010499 close(3) = 010499 arch_prctl(ARCH_SET_FS, 0x7fd66ec12540) = 010499 openat(AT_FDCWD, &quot;/usr/lib/locale/locale-archive&quot;, O_RDONLY|O_CLOEXEC) = 310499 fstat(3, &#123;st_mode=S_IFREG|0644, st_size=3004224, ...&#125;) = 010499 close(3) = 010499 fstat(1, &#123;st_mode=S_IFIFO|0600, st_size=0, ...&#125;) = 010499 openat(AT_FDCWD, &quot;1-redirect&quot;, O_RDONLY) = 310499 fstat(3, &#123;st_mode=S_IFREG|0644, st_size=11, ...&#125;) = 010499 fadvise64(3, 0, 0, POSIX_FADV_SEQUENTIAL) = 010499 read(3, &quot;havenantry\\n&quot;, 131072) = 1110499 write(1, &quot;havenantry\\n&quot;, 11) = 1110499 read(3, &quot;&quot;, 131072) = 010499 close(3) = 010499 close(1) = 010499 close(2) = 010499 exit_group(0) = ?10499 +++ exited with 0 +++10498 &lt;... wait4 resumed&gt; [&#123;WIFEXITED(s) &amp;&amp; WEXITSTATUS(s) == 0&#125;], 0, NULL) = 1049910498 --- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=10499, si_uid=1000, si_status=0, si_utime=0, si_stime=0&#125; ---10498 rt_sigreturn(&#123;mask=[]&#125;) = 1049910498 wait4(-1, &lt;unfinished ...&gt;10500 dup2(3, 0) = 010500 close(3) = 010500 openat(AT_FDCWD, &quot;1-redirect&quot;, O_WRONLY|O_CREAT|O_TRUNC, 0666) = 310500 fcntl(1, F_DUPFD, 10) = 1010500 close(1) = 010500 fcntl(10, F_SETFD, FD_CLOEXEC) = 010500 dup2(3, 1) = 110500 close(3) = 010500 execve(&quot;/usr/bin/tr&quot;, [&quot;tr&quot;, &quot;\\\\n&quot;, &quot; &quot;], 0x561b05f9b268 /* 61 vars */) = 010500 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)10500 access(&quot;/etc/ld.so.preload&quot;, R_OK) = -1 ENOENT (No such file or directory)10500 openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 310500 fstat(3, &#123;st_mode=S_IFREG|0644, st_size=103311, ...&#125;) = 010500 close(3) = 010500 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)10500 openat(AT_FDCWD, &quot;/lib/x86_64-linux-gnu/libc.so.6&quot;, O_RDONLY|O_CLOEXEC) = 310500 read(3, &quot;\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\260\\34\\2\\0\\0\\0\\0\\0&quot;..., 832) = 83210500 fstat(3, &#123;st_mode=S_IFREG|0755, st_size=2030544, ...&#125;) = 010500 close(3) = 010500 arch_prctl(ARCH_SET_FS, 0x7f112f724540) = 010500 openat(AT_FDCWD, &quot;/usr/lib/locale/locale-archive&quot;, O_RDONLY|O_CLOEXEC) = 310500 fstat(3, &#123;st_mode=S_IFREG|0644, st_size=3004224, ...&#125;) = 010500 close(3) = 010500 fadvise64(0, 0, 0, POSIX_FADV_SEQUENTIAL) = -1 ESPIPE (Illegal seek)10500 read(0, &quot;havenantry\\n&quot;, 8192) = 1110500 fstat(1, &#123;st_mode=S_IFREG|0644, st_size=0, ...&#125;) = 010500 read(0, &quot;&quot;, 8192) = 010500 close(0) = 010500 write(1, &quot;havenantry &quot;, 11) = 1110500 close(1) = 010500 close(2) = 010500 exit_group(0) = ?10500 +++ exited with 0 +++10498 &lt;... wait4 resumed&gt; [&#123;WIFEXITED(s) &amp;&amp; WEXITSTATUS(s) == 0&#125;], 0, NULL) = 1050010498 --- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=10500, si_uid=1000, si_status=0, si_utime=0, si_stime=0&#125; ---10498 rt_sigreturn(&#123;mask=[]&#125;) = 1050010498 exit_group(0) = ?10498 +++ exited with 0 +++ 问题的本质 为什么数据会被清空？ openat(AT_FDCWD, &quot;1-redirect&quot;, O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3 man 2 open中提到 &gt; If O_TRUNC is specified and the file exists, the file is truncated to zero length. tr进程中试图重定向输出到一个已经打开的文件$1中，因此$1的文件就会被清空。 为什么会出现有时能够成功输出的情况 这是一个进程间数据竞争的问题，如果cat在tr进程把文件清空之前读出来了数据 那么数据就会被写入cat的标准输出，然后通过pipeline被tr进程读取 完成了这一步之后tr进程因为重定向会将文件清空，但是能够从标准输入中读取到原来的数据 然后执行tr，最后使用了一个write进行写入 另一个有趣的现象 如果把&gt;修改为&gt;&gt;，例如cat tmp&gt;&gt;tmp 在Linux中会无法执行，提示input file is output file，而在macos zsh下则会无限循环 猜测：cat的标准输出和标准输入被重定向到了同一个文件，因此cat检查文件是否结束时会检查到刚被写入文件的一行，就始终无法结束","categories":[{"name":"os","slug":"os","permalink":"https://wym0120.github.io/categories/os/"},{"name":"os lecture","slug":"os/os-lecture","permalink":"https://wym0120.github.io/categories/os/os-lecture/"}],"tags":[{"name":"os","slug":"os","permalink":"https://wym0120.github.io/tags/os/"}]},{"title":"[ISER] [FM] Model Checking for Programming Languages using VeriSoft","slug":"paper/ISER/Formal Methods/fm-2","date":"2020-07-19T05:58:55.000Z","updated":"2021-04-12T15:01:26.108Z","comments":true,"path":"2020/07/19/paper/ISER/Formal Methods/fm-2/","link":"","permalink":"https://wym0120.github.io/2020/07/19/paper/ISER/Formal%20Methods/fm-2/","excerpt":"","text":"Abstract Veri cation by state-space exploration, also often referred to as checking\", is an e ective methodfor analyzing the correctness of concurrent reactive systems (e.g., communication protocols). Unfortunately,existing model-checking techniques are restricted to theveri cation of properties of models, i.e., abstractions, ofconcurrent systems.In this paper, we discuss how model checking can beextended to deal directly with \" descriptions ofconcurrent systems, e.g., implementations of communication protocols written in programming languages suchas C or C++. We then introduce a new search technique that is suitable for exploring the state spaces ofsuch systems. This algorithm has been implemented inVeriSoft, a tool for systematically exploring the statespaces of systems composed of several concurrent processes executing arbitrary C code. As an example ofapplication, we describe how VeriSoft successfully dis-covered an error in a 2500-line C program controllingrobots operating in an unpredictable environment. keywords: model-checking 总体评价 Motivation 并发系统中非model-checking的方法找到难以检查或复现的error 过去的一些工具都是建立在“系统的每一个状态都能够很容易的被一个唯一的标示符表示”的这一假设上。然而实际上，一个进程的状态是由它可以访问的并且可能会改变它本身的状态的数据组成的（简单点说例如寄存器和内存），这是不可能由一个简单的string来表示的，因此在执行中会遇到各种各样的问题 原有方法的状态探索的策略会在面对状态空间膨胀时缺乏一个有效的机制能减少无效探索 Evalution 设计了一个叫做测试verisoft的工具测试了一个2500行的C程序。 主要检查四类问题：deadlock assertion divergence（某个visible operation超时） livelock（某个时刻资源必须大于n） 结果：成功的在几分钟内找到了29个transition的组合会导致divergence问题 我认为Evaluation不是这篇文章最大的亮点，但是这个确实证明了文中提出的算法能够在一个复杂的由现代语言编写的中小型规模项目中work，并且时间是可以完全可以接受的（几分钟） Details 什么是model checking model checking是一种用于验证并发系统正确性的方法（后来分布式系统也可以认为是一种并发系统），而广义上讲，所有通过自动化状态空间探索来验证程序的方法都被成为model checking。它使用一种modeling language来描述程序的状态空间，并以此为基础来检查一些特定的属性，例如死锁、assertion。model checking主要用于寻找难以检测和复现的error 缩减状态空间 step1 定义一系列的形式化的语义（具体见liquidtext笔记） step2 使用所有可达的的全局状态以及这些状态之间的transition来描述整个系统的行为，在这里就缩减了大量的无关状态。在一个全局状态上，要么blocking，要么就能够通过有限的进程内的执行达到下一个全局状态 step3 通过优化的算法来减少无效的状态访问 理论依据（证明略） &gt; Consider a concurrent system as de ned above, and let AG denote its state space. Then, all the dead locks that are reachable after the initialization of the system are global states, and are therefore in AG. Moreover, if there exists a state reachable after the initialization of the system where an assertion is violated, then there exists a global state in AG where the same assertion is violated. 知乎上的一个解释 针对无死锁这个性质对程序做model checking。 那么它是怎么减少状态空间的大小的呢？ 无死锁这个性质显然针对的是多线程程序。 对于多线程程序，每个线程都有自己的局部状态(如local stack) 以及共享的全局状态(比如全局变量)。它们合并起来就是整个程序状态。 产生死锁就是指在某个程序状态上，每个线程的局部状态都不能再前进了。 设想一下，每个线程在执行指令的过程中要么改变的是自己的局部状态， 要么改变的是全局状态来和其它线程通信。我们把它们分别称作局部指令与全局指令。 两条全局指令之间的那些局部指令要么是有限的，要么会陷入某种等待。 所以当没有死锁的时候，即各个线程没有同时陷入等待的时候， 经过有限步局部指令，全局状态必然会因为全局指令的执行而不断改变。 反之，如果产生死锁，全局状态就不能再前进了。 因此，我们只要无视局部状态，仅观察全局状态能否前进就可以确定有没有死锁产生了。 程序的状态空间这样就被我们缩减到了全局状态空间 优化探索策略 原来的探索策略 Initialize:Set is empty; H is empty; add s0 to Set;Loop: while Set != empty ; do &#123; take s out of Set; if s is NOT already in H then&#123; enter s in H; T = enabled(s); for all t in T do&#123; s&#x27; = succ(s) after t; add s&#x27; to Set; &#125; &#125; &#125; 问题1：状态表示过于简单；状态庞大且复杂难以存储 -&gt; 依然进行探索但是不存放状态，而是存放一个有上限的transion记录 问题2：会产生大量的重入 -&gt; 根据依赖关系选择transition，并且记录已经达到过的transition 优化后的算法 Initialize: Stack is empty;Search() &#123; DFS(\b∅); &#125;DFS(set: Sleep) &#123; T = Persistent Set()\\Sleep; while T 6= ; do &#123; take t out of T ; push (t) onto Stack; Execute(t); DFS(&#123;t&#x27; ∈ Sleep | t&#x27; and t are independent&#125;); pop t from Stack; Undo(t); Sleep = Sleep ∪ &#123;t&#125;; &#125;; &#125; 理论依据（证明略） &gt; Consider a concurrent system as de ned in Section 2, and let AG denote its state space. Assume AG is nite and acyclic. Then, al l the dead locks in AG are visited by Algorithm 2（上面的这个算法）. Moreover, if there exists a global state in AG where an assertion is violated, then there exists a global state visited by Algorithm 2 where the same assertion is violated. 产生重入的两个原因 - From the initial state, the exploration of any interleaving of a single fi nite partial ordering of transitions of the system always leads to the same state.This state will thus be visited several times because of all these interleavings. - From the initial state, explorations of differentnite partial orderings of transitions may lead to the same state. todo 算法的直觉还是没能很好的get，再讨论一下","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Formal Methods","slug":"Formal-Methods","permalink":"https://wym0120.github.io/tags/Formal-Methods/"}]},{"title":"[ISER] [FM] Symbolic execution and program testing","slug":"paper/ISER/Formal Methods/fm-1","date":"2020-07-17T14:31:21.000Z","updated":"2021-04-12T15:01:26.108Z","comments":true,"path":"2020/07/17/paper/ISER/Formal Methods/fm-1/","link":"","permalink":"https://wym0120.github.io/2020/07/17/paper/ISER/Formal%20Methods/fm-1/","excerpt":"","text":"Abstract This paper describes the symbolic execution of programs. Instead of supplying the normal inputs to a program (e.g. numbers) one supplies symbols representing arbitrary values. The execution proceeds as in a normal execution except that values may he symbolic formulas over the input symbols. The difficult, yet interesting issues arise during the symbolic execution of conditional branch type statements. A particular system called EFFIGY which provides symbolic execution for program testing and debugging is also described, it interpretively executes programs written in a simple PL/I style programming language. It includes many standard debugging features, the ability to manage and to prove things about symbolic expressions, a simple program testing manager, and a program verifier. A brief discussion of the relationship between symbolic execution and program proving is also included. Key Words and Phrases: symbolic execution, program testing, program debugging, program proving, program verification, symbolic interpretation 总体评价 Motivation 不是所有的程序都有一个formal specification（类似于输入、输出、约束条件的集合），但是仍希望能够很好的验证它 给定的输入测试正确不能说明其余未测试到的地方也正确 尽可能减少测试成本 Evalution 无 Details 符号执行的天生缺陷 -&gt; 需要使用一个理想模型来进行符号执行 1. 无法考虑实际硬件的情况，例如寄存器个数，寄存器能够存放的数值范围 2. 一些程序的执行树是无穷多的 3. 即便是再简单合适的语言对于if语句的符号执行都需要理论证明，而这个理论证明理论上不可能 符号执行是什么？ 符号执行是在保证了原有的语义都不被修改的基础上进行扩充，唯一可以引入符号执行的时机是将他们作为程序的输入 如何定义符号执行？ input ：输入{a1,a2,a3...} pc ：path condition 关于输入集合{ai}的boolean表达式，并且绝对不会包含程序的变量。初始值为true q ：具体表达式 执行：对某一个if语句的一次执行情况进行归纳，而不针对这个if语句 nonforking ：所有的输入都能够要么满足pc，要么不满足pc，不会两者都不满足 forking ：pc和!pc都不满足，需要把当前的if语句的条件加到pc后面更新pc 符号执行的性质 可交换：在输入时将ai替换为某个具体的实例进行执行和执行到最后再替换成实例的效果是完全一致的 设执行为E，实例集合为K，符号集合为X，程序为K 则E（P（X））-&gt; 实例化K === P（X）实例化K -&gt; 执行P（K） === E（P（K）） 执行树 对每个forking执行的IF语句划分出true和false两条路径 性质： - 每个叶节点都存在非符号的测试输入能够到达 - 每一个叶节点代表的pc都和其他pc是独立的，即任意两条之间一定存在一个唯一的节点，在那之后两者分开 todo 剩下一个floyd prove没看","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"Formal Methods","slug":"Formal-Methods","permalink":"https://wym0120.github.io/tags/Formal-Methods/"}]},{"title":"[课堂笔记] 操作系统","slug":"lecture/os/os-lecture-notes","date":"2020-07-05T13:22:21.000Z","updated":"2021-04-12T15:01:26.106Z","comments":true,"path":"2020/07/05/lecture/os/os-lecture-notes/","link":"","permalink":"https://wym0120.github.io/2020/07/05/lecture/os/os-lecture-notes/","excerpt":"","text":"理论课 代码课 应用眼中的操作系统 _start是链接器真正的入口，而不是main，可以通过ld -e main file.o来指定程序入口。一个C程序的第一条指令位于系统内置的链接器中，链接器会先加载libc，然后再加载目标程序 objdump -S看到的源码里面的@plt代表这段代码是动态链接的 C4 系统中的进程 C5 链接与加载 静态链接与符号重定位 ld链接器的本质就是把各种.o文件中的各种段复制到二进制文件中并且进行重定位 动态链接 必须的几个条件： - 位置无关代码，全部通过pc相对寻址 - 引用数据或者代码的时候如果这是一个未知的符号，那么必须去查表来获得地址 查表这个行为就是一个call *libxxx.tab[target]。(在不实现延迟解析的时候) 如果是需要动态加载的程序，那么gdb strati停在的第一条指令其实是在libld中的。并且libld的代码会被映射到程序的地址空间中，由它来按照依赖的倒序依次加载其余的动态库。 在libld加载完target之后，libld会调用_dl_runtime_resolve来重填libxxx.tab[target]这一项 在ELF文件中实际上这个表就叫做GOT，global offset table，库函数和可执行文件都有GOT。 所以用file查看可执行文件和一个共享库的时候给出的结果都是一个shared object GOT 中储存的数据 - GOT[0]: .dynamic 节的地址 - GOT[1]: link map , 用于遍历依赖的动态链接库 - GOT[2]: _dl_runtime_resolve 的地址 , call *GOT[2] 可以完成符号解析 - GOT[i]: 程序所需的动态符号地址 (printf, ...) lazy symbol resolve黑科技看视频回看 专题","categories":[{"name":"os","slug":"os","permalink":"https://wym0120.github.io/categories/os/"},{"name":"os lecture","slug":"os/os-lecture","permalink":"https://wym0120.github.io/categories/os/os-lecture/"}],"tags":[{"name":"lecture notes","slug":"lecture-notes","permalink":"https://wym0120.github.io/tags/lecture-notes/"},{"name":"os","slug":"os","permalink":"https://wym0120.github.io/tags/os/"}]},{"title":"Multiple-Entry Testing of Android Applications by Constructing Activity Launching Contexts","slug":"paper/mobile/icse20 Multiple-Entry","date":"2020-07-05T02:25:34.000Z","updated":"2021-04-12T15:01:26.111Z","comments":true,"path":"2020/07/05/paper/mobile/icse20 Multiple-Entry/","link":"","permalink":"https://wym0120.github.io/2020/07/05/paper/mobile/icse20%20Multiple-Entry/","excerpt":"","text":"总体评价 做的不怎么样，应该会被reject。因为soundness不够，并且覆盖率甚至不如APE（APE是sound的） 单入口想要测试充分的固有缺陷： 有些activity因为复杂手势或者复杂的逻辑操作而无法达到，每个activity距离默认的入口的距离不同，测试的exploration对于不同的activity是不同的，这就导致了越难发现的activity越难被测充分 有的测试方法能够找到activity之间的数据依赖但是不知道什么因素能够对后面的activity造成影响，可能达到这个activity的时候并不是一个完整的能够引发bug的上下文环境。并且这个上下文环境甚至可能是来自于app外部的 (1.Furthermore, because of the infinite test space of GUI programs, it is difficult to launch activities under complete contexts using SET 2. ...XXX has different behaviors depending on its Activity Launching Contexts (ALCs), which is generated by previous event operations or received from outside (e.g., another app)) 即使达到了某个activity，也无法知道到底是否覆盖完全了（当然，这个问题本身也是不可判定的） 多入口试图如何解决问题： 找到什么才是最能够影响某个activity的启动结果的因素，然后尽可能测试这个因素 -&gt; ICC（inter-component communication）最为重要 &gt; 其余因素还有设备配置、activity栈以及全局数据。设备配置直接报告，activity栈能够在空栈的情况下使用Faxla策略，在非空情况下使用Faxex策略。而全局数据，如果能够探索到全局设置相关的activity，在多轮的测试中会修改它 试图直接启动某个activity，然后生成它需要的ICC并测试 动态的维护每个activity的explore weight使得能够触发更多transition的activity能够被更多的测试到，并且让一些意外crash掉的activity也能够被覆盖到（毕竟不能crash了发现了一个bug就丢掉，可能这个crash的节点是后面更多crash节点的entry） 整个工作的一些限制 focus在启动环节，是以activity来进行划分，对于某个activity中的一些例如button的点击应该是完全没有纳入测试范围的 在basic attribute基本只用到了string相关API而不能够使用其他JDK的库更不用说第三方库 how-to： 如何产生多入口：把原本只能通过EA(exported activity 能够被外部app启动)达到的IA（internal activity）修改成为EA，只需要把andorid：exported设置为true或者修改manifest中的intent filter 如何动态修改权重：通过多轮测试，Faxex策略基于Faxla的结果，并结合了activity之间的transition &gt; 因为静态分析的一些技术限制，transition可能不够精准，因此Faxex中也会动态地发现更多可到达的状态 ALM如何建立：最主要依赖于“跳转都是与string相关操作”这一假设，例如if-else中使用一个对string的比较，根据比较结果决定是否跳转或do something，这个假设的局限性就在于当遇到与string不相关的操作时就不能work dummy activity：运行时构造出来的虚拟的入口用来访问一些需要权限的无法通过adb直接启动的activity Evaluation RQ1: ALC构造的效果 自己构造了一些测试用例 RQ2: activity启动的效果 baseline : Monkey Ape IntentFuzzer 最终整个Fax覆盖率达到96.4%，成功启动了60%的activity RQ3: 是否提高了代码覆盖度 略低于IntentFuzzer的覆盖率，但不知道这个是一个怎么样的baseline RQ4: Fax是否能找到了更多的bug 确实找到了bug，但是没有baseline 整个evaluation都不行，并且它自己一个fuzz interface的work去和默认入口执行的比较这本身就不fair 没找到答案的问题： 如何确认一个activity是“global setting related”","categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"}],"tags":[{"name":"mobile","slug":"mobile","permalink":"https://wym0120.github.io/tags/mobile/"},{"name":"testing","slug":"testing","permalink":"https://wym0120.github.io/tags/testing/"},{"name":"icse","slug":"icse","permalink":"https://wym0120.github.io/tags/icse/"}]},{"title":"JVM习题","slug":"lecture/jvm/jvm-test","date":"2020-07-03T06:01:12.000Z","updated":"2021-04-12T15:01:26.106Z","comments":true,"path":"2020/07/03/lecture/jvm/jvm-test/","link":"","permalink":"https://wym0120.github.io/2020/07/03/lecture/jvm/jvm-test/","excerpt":"","text":"对于一个数组对象int[] arr，什么能够使 \"arr instanceof ___\"的结果为true 1 java.lang.Object 2 java.io.Serializable 3 java.lang.Cloneable 4 java.lang.Runable A. 123 ✅ B. 134 C. 234 D. 1234 类的生命周期有：加载 -&gt; 验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化 -&gt; 使用 -&gt; 卸载，其中类加载的哪个/哪些阶段的发生顺序不是固定的 A. 初始化 B. 初始化 解析 C. 解析 验证 D. 解析 ✅ 使用真实的java指令执行某个类时，假设在目录src下存在一个被修改过的java/lang/Object.class和一个Main.class,并且所有的检验机制都判定其合法，那么以下说法正确的是 A. 除了直接覆盖掉JDK目录对应类这个文件以外，存在一个方法使得自己修改的这个Object类替换掉官方的实现 ✅ B. 无论如何也不可能加载到自己修改过的Object C. 能加载但是会被官方的覆盖掉 D. 以上均不对 以下代码中执行doSomething方法时调用到的invoke相关指令是？ public class Example &#123; public static void main(String[] args) &#123; Child c &#x3D; new Child(); c.doSomething(); &#125;&#125;class Child extends Parent&#123;&#125;class Parent implements B&#123; public void doSomething()&#123;&#125;&#125;interface A&#123; public void doSomething();&#125;interface B extends A&#123;&#125; A. invokespecial B. invokestatic C. invokevirtual ✅ D. invokeinterface E. invokedynamic 以下代码中执行doSomething方法时调用到的invoke相关指令是？ public class Example &#123; public static void main(String[] args) &#123; A c &#x3D; new Child(); c.doSomething(); &#125;&#125;class Child extends Parent&#123;&#125;class Parent implements B&#123; public void doSomething()&#123;&#125;&#125;interface A&#123; public void doSomething();&#125;interface B extends A&#123;&#125; A. invokespecial B. invokestatic C. invokevirtual D. invokeinterface ✅ E. invokedynamic 以下代码执行结果为 public class E5 &#123; public static void main(String[] args) &#123; Parent c &#x3D; new Child(); c.doSomething(); &#125;&#125;class Child extends Parent&#123; public void doSomething()&#123; System.out.print(&quot;in Child &quot;); &#125;&#125;class Parent implements A&#123; public void doSomething()&#123; System.out.print(&quot;in Parent &quot;); &#125;&#125;interface A&#123; default void doSomething()&#123; System.out.print(&quot;in interface A&quot;); &#125;&#125; A. in Child ✅ B. in Parent C. in interface A D. in Child in interface A 以下代码执行结果为 public class Example &#123; public static void main(String[] args) &#123; Child child &#x3D; new Child(); child.doSomething(); &#125;&#125;class Child extends Parent&#123; public Child()&#123; super(); doSomething(); &#125; static &#123; doSomething(); &#125; public static void doSomething()&#123; System.out.print(&quot;A&quot;); &#125;&#125;class Parent&#123; public Parent()&#123; doSomething(); &#125; static&#123; doSomething(); &#125; public static void doSomething()&#123; System.out.print(&quot;B&quot;); &#125;&#125; A. \"BABAB\" B. \"ABAAB\" C. \"BABAA\" ✅ D. \"ABABB\" 以下代码执行结果为 public class Example &#123; public static void main(String[] args) &#123; Parent child &#x3D; new Child(); child.doSomething(); &#125;&#125;class Child extends Parent&#123; public Child()&#123; super(); doSomething(); &#125; static &#123; doSomething(); &#125; public static void doSomething()&#123; System.out.print(&quot;A&quot;); &#125;&#125;class Parent&#123; public Parent()&#123; doSomething(); &#125; static&#123; doSomething(); &#125; public static void doSomething()&#123; System.out.print(&quot;B&quot;); &#125;&#125; A. \"BABAB\" ✅ B. \"ABAAB\" C. \"BABAA\" D. \"ABABB\" 以下代码执行结果为 public class Example&#123; public static void main(String[] args) &#123; Parent child &#x3D; (Parent) new Child(); child.doSomething(); &#125; &#125; class Child extends Parent&#123; static private int val&#x3D;2; public Child()&#123; super(); doSomething(); &#125; static &#123; val++; doSomething(); &#125; public static void doSomething()&#123; System.out.print(val); &#125; &#125; class Parent&#123; static private int val&#x3D;1; public Parent()&#123; doSomething(); &#125; static&#123; val++; doSomething(); &#125; public static void doSomething()&#123; System.out.print(val); &#125; &#125; A. 23333 B. 22222 C. 22333 D. 23232 ✅ 以下代码执行结果为 public class Example&#123; public static void main(String[] args) &#123; Parent child1 &#x3D; new Child(); child1.doSomething(); Child child2 &#x3D; new Child(); child2.doSomething(); &#125;&#125;class Child extends Parent&#123; static private int val&#x3D;2; public Child()&#123; super(); doSomething(); &#125; &#123; ++val; &#125; static &#123; val++; doSomething(); &#125; public static void doSomething()&#123; System.out.print(val); &#125;&#125;class Parent&#123; static private int val&#x3D;1; public Parent()&#123; doSomething(); &#125; &#123; ++val; &#125; static&#123; val++; doSomething(); &#125; public static void doSomething()&#123; System.out.print(val); &#125;&#125; A. 23343455 ✅ B. 23343454 C. 23344455 D. 23344454 C. 2334445565 D. 2234345565 E. 2334445465 F. 2234345465 以下哪个选项中的内容全部能够被线程共享 A. 堆中实例对象、字符串常量池、本地方法栈 B. 运行时常量池、堆中实例对象 ✅ C. 方法区、本地方法栈 D. 局部变量表、方法区 下列表述正确的数量有（）个 “每个frame的操作数栈最大栈深度是运行时决定的” “类的initiating loader和defining loader可以是同一个loader” “方法是类加载阶段由jvm动态生成的” “final static类型的变量是在类加载的准备阶段被赋值的” A. 0 B. 1 ✅ C. 2 D. 3 E. 4 下列表述正确的数量有（）个 “multianewarray中第一个从操作数栈中被pop出来的值代表第一维的长度，第二个代表第二维，以此类推...” “multianewarray对于长度的规定是不允许有负值但允许出现0，这种情况下它会被处理成1” “多维基本类型数组类的加载中不需要链接阶段” “数组加载过程中不会抛出IllegalAccessError” A. 0 B. 1 ✅ C. 2 D. 3 E. 4 方法签名“Object m(int i, double d, Thread t) {...}”的描述符是 A.(IDLjava/lang/Thread;)Ljava/lang/Object; ✅ B.(IDLjava/lang/Thread;)Ljava/lang/Object C.Ljava/lang/Object(IDLjava/lang/Thread;); D.Ljava/lang/Object(IDLjava/lang/Thread;) 下列表述正确的数量有（）个 “每个常量最多需要2byte的tag来标明自己的类型” “UTF8info中包含了一个对StringInfo的index，而StringInfo中真正存储了字符串” “由于java无法表示无符号short类型，因此可以把数据读取到int，再进行 value || 0xff的操作来获取低16位” “常量池表的有效索引是从1到constant_pool_\u001dcount” A. 0 ✅ B. 1 C. 2 D. 3 E. 4 下列表述正确的数量有（）个 “在设置加载器的搜索路径时，dir/* 这样的表示会递归搜索dir目录以及子目录中所有的jar包” “加载器搜索时如果能够在多个路径中找到某个类，那么以最先找到的结果作为返回结果” “java.lang.Object这个类在实际的jar包中的文件名是Object.class” “多个路径设置可以使用File.separator作为分割” A. 0 B. 1 C. 2 ✅ D. 3 E. 4 下列表述正确的数量有（）个 “双亲委托中用户类加载器会同时委托给bootstrap加载器和ext加载器” “双亲委托中当加载器无法从自己的搜索空间中找到类时才会向其他加载器发出委托” “一个类可以加载同一个包下面声明为protected的另一个类” 这三个类在同一个包中，Visitor无法通过编译public class Visitor&#123; Visible1.Unknown v1 &#x3D; new Visible1.Unknown(); Visible2.Unknown v2 &#x3D; new Visible2.Unknown();&#125;public class Visible1&#123; private static class Unknown&#123;&#125;&#125;class Visible2&#123; public static class Unknown&#123;&#125;&#125; A. 0 B. 1 C. 2 ✅ D. 3 E. 4 输入java -h得到的结果中包含“java [-options] -jar jarfile [args...]”，下列说法正确的是 A. []中的内容代表可选；jarfile不是一个必须的参数，可以先输入args再通过别的指令额外指定 B. []中的内容是必须至少选择一个的意思；jarfile是一个必须的参数 C. []中的内容代表可选；jarfile是一个必须的参数 ✅ D. []中的内容是必须至少选择一个的意思；jarfile不是一个必须的参数，可以先输入args再通过别的指令额外指定 如果要使用commons cli的库实现自己的命令行接口，其中哪个流程是不涉及的 A. 预定义 B. 解析 C. 通过用户输入参数动态新增定义 ✅ D. 使用（实现业务逻辑） 类加载的链接阶段不包括什么子阶段 A. 验证 Verification B. 准备 Preparation C. 解析 Resolution D. 创建 Creation ✅ 下列哪种功能IDEA的debugger没有提供： A. 在抛出特定异常之前暂停程序的异常断点B. 符合特定条件（如某个变量等于某个值）时才触发的断点C. 在某个断点被触发之后才生效的断点D. 以上功能都提供了 ✅ 下列关于字节码的说法中，错误的是： A. Java字节码之所以叫字节码是因为指令的操作码(opcode)只有一个字节B. GOTO的offset是相对于GOTO的操作码的地址的C. Java字节码储存在classfile的常量池（constantpool）字段中 ✅D. invokeVirtual 比 invokeInterface 指令短 在使用Java程序读取数据类型u2时，应该使用哪种类型的变量？ A. unsigned shortB. int ✅C. shortD. char 关于指令FCMPG和指令FCMPL的说法中，正确的是：（假设当前操作数栈的情况是: ...op1,op2） A. 如果op1&gt;op2，FCMPG压栈1，FCMPL压栈-1B. 如果op1&gt;op2，FCMPG压栈-1，FCMPL压栈1C. 如果op1&#x3D;&#x3D;op2, FCMPL和FCMPG都压栈-1D. FCMPL和FCMPG仅在op1和(或)op2中有NaN的时候行为才有区别 ✅ byte a = 0xff;那么在Java中，表达式a &amp; 0xff的值和类型分别是 A. -1, int ✅B. 0xff, intC. -1, shortD. 0xff, byte 关于指令ILOAD，下面说法中正确的是： A. ILOAD 把一个4字节的数据当作int从局部变量表(LocalVars)加载到操作数栈(OperandStack)中 ✅B. ILOAD 把一个4字节的数据当作int从操作数栈加载到局部变量表中C. ILOAD 把一个4字节的数据当作int从常量池(ConstantPool) 加载到操作数栈中D. 以上说法都不对 \"双亲委托机制\"是： A. 实现运行时多态的机制B. 提高编译器性能的机制C. 用在类加载器上的机制 ✅D. 实现虚函数调用的机制 下列关于invokeVirtual的内容，错误的是： A. invokeVirtual的实现中可以使用虚函数表（Vtable）进行优化B. invokeVirtual可以用来调用本地方法(native method)C. invokeVirtual可以用来调用构造方法(Constructor) ✅D. ABC里至少有一个是错的 这段代码正确地实现ISUB指令了吗？ public class ISUB extends NoOperandsInstruction &#123; @Override public void execute(StackFrame frame) &#123; OperandStack stack &#x3D; frame.getOperandStack(); int val1 &#x3D; stack.popInt(); int val2 &#x3D; stack.popInt(); int res &#x3D; val1 - val2; stack.pushInt(res); &#125;&#125; A. 正确实现了B. 没有正确实现 ✅C. 别选这一项，这是判断题D. 楼上说的对 关于StackFrame的说法中，正确的是： A. 在运行过程中，每个method对应且仅对应一个StackFrameB. 有的StackFrame可能有多个methodC. 有的method可能对应多个StackFrame ✅D. StackFrame可以多线程共享 System.out.println(\"this is a string\")方法有几个参数？ A. 1个，是内容为&quot;this is a string&quot;的String ✅B. 2个，分别是this和StringC. 2个，分别是类名和StringD. println是个宏(macro), 不是方法 方法foo描述符为(III)V, 关于foo的说法正确的是： A. foo的返回值是Void类型的对象B. foo的maxLocal可能是2C. foo的maxLocal可能是6 ✅D. 调用foo的时候应该使用invokeVirtual指令 实验和大作业过程中，用哪个指令来反汇编.class文件？ A. javacB. javap ✅C. java -jarD. mvn decompile 下列关于classfile中attribute的说法正确的是： A. Code属于一种Attribute，每个方法都有这个Attribute B. 在classfile中加入自定义的Attribute不会影响JVM正常解析classfile ✅C. 在classfile中，Attribute储存在constantpool里D. 以上说法都不对 下列关于classfile中IntergerInfo这一常量池信息说法正确的是： A. 其中四字节的int是按小端顺序储存的B. 其中四字节的int是按大端顺序储存的 ✅C. 储存顺序和JVM的实现有关，选择一种即可D. classfile中储存的int是6字节，在加载到JVM后需要进行ValueSetConversion 如果FADD执行时操作数栈顶的数据其实是int（例如是被ICONST指令加载进来的）： A. JVM的行为是未定义的，可以随意处理 ✅B. JVM应该在执行到这条指令时抛出异常C. JVM应该把int的值转换成floatD. Java5之后，JVM可以使用指令多态技术把FADD替换成IADD而不会引发异常 下面哪个是JVM中加载引用的指令： A. ALOAD ✅B. BLOADC. ILOADD. DLOAD 在描述符中，如何表示long类型: A. LB. J ✅C. KD. Ljava&#x2F;lang&#x2F;Long; 下面这段代码对LUSHR的实现正确吗？ @Override public void execute(StackFrame frame) &#123; OperandStack stack &#x3D; frame.getOperandStack(); int val2 &#x3D; stack.popInt(); long val1 &#x3D; stack.popLong(); long res &#x3D; val1 &gt;&gt;&gt; (val2 &amp; 0x2f); stack.pushLong(res); &#125; A. 正确B. 不正确 ✅C. 这是道判断题，别选这一项D. 楼上说的对 GOTO指令的offset是： A. 有符号数 ✅B. 无符号数C. 对常量池中一个IntegerInfo的引用，IntegerInfo储存了真正的offset值D. 跳转目标的绝对地址","categories":[{"name":"jvm","slug":"jvm","permalink":"https://wym0120.github.io/categories/jvm/"}],"tags":[{"name":"jvm","slug":"jvm","permalink":"https://wym0120.github.io/tags/jvm/"}]},{"title":"GUI-report","slug":"report/GUI-report","date":"2020-07-02T05:47:28.000Z","updated":"2021-04-12T15:01:26.111Z","comments":true,"path":"2020/07/02/report/GUI-report/","link":"","permalink":"https://wym0120.github.io/2020/07/02/report/GUI-report/","excerpt":"","text":"看清gui widgets 人工智能如何解决这些问题 gui widget detection - 重点之一是判断bounding box - 另一个重点是region分类 gui widget detection目前的困难： - 数据方面 - nature scene - 图文并茂 - 全景检测 - physical object - 各种各样的组件同种之间差距比较大，没有固定的feature很难区别 - 策略问题 - 目前大多数的策略都是bottom-up，会造成很大噪音 - cnn神经网络更适合学习architecture而不是shape - gui detection需要更高的识别准确度，而目前一般的识别准度只是要求超过0.5 - 模型选择问题 overall performance faster Rcnn &gt; deep learning &gt; 传统方法","categories":[{"name":"report","slug":"report","permalink":"https://wym0120.github.io/categories/report/"}],"tags":[{"name":"gui","slug":"gui","permalink":"https://wym0120.github.io/tags/gui/"},{"name":"mobile","slug":"mobile","permalink":"https://wym0120.github.io/tags/mobile/"}]},{"title":"mobileperf","slug":"source code/mobileperf","date":"2020-06-30T07:39:58.000Z","updated":"2021-04-12T15:01:26.112Z","comments":true,"path":"2020/06/30/source code/mobileperf/","link":"","permalink":"https://wym0120.github.io/2020/06/30/source%20code/mobileperf/","excerpt":"","text":"需求场景 硬件配置差 压测时间长 72小时左右 需要同时测的app比较多 优势 adb方式兼容性强、侵入性小，不需要考虑保活问题 pc端占用资源极少，移动端主要是系统调用 源码分析 原作者在博客里已经把几乎所有的关键点都讲了，实际代码中也并没有更多的技术性的细节，和操作系统的交互基本都是对adb shell的封装和对top等指令的调用，以及生成xlsx、csv文件和绘图 博客地址(https://testerhome.com/topics/23449) 模块 和操作系统交互 连接 adb usb &gt; adb wifi CPU top指令 内存 dumpsys meminfo FPS dumpsys SurfaceFlinger/gfxinfo(after 8) 网络流 /proc/net/xt_qtaguid/stats （TrafficStats的底层实现） 电量 dumpsys batteryproperties/dumpsys battery（after） 进程数统计 ls -lt /proc/pid/task 其他 monkey logcat 问题 mobileperf只是做了统计，并且不能知道某个时刻到底做了什么事情，这样的一个工具是如何和其他工具结合起来来定位某个时刻的操作？ &gt; 讨论前的想法： 用录制好的测试序列作为测试，同时记录进行的操作与时间点，在监测结束后通过人工/按某个阈值筛选出可疑的范围，复现当时的操作找出性能问题 这样的做法有两个延伸问题：首先，假设在很久之前的某个操作带来了副作用导致在很后面的一个操作发生了性能问题要如何检查出来？其次，阈值的设置在业界实际中是怎么确定出来的？(作者提到的是用的是线上指标)","categories":[{"name":"code","slug":"code","permalink":"https://wym0120.github.io/categories/code/"}],"tags":[{"name":"code","slug":"code","permalink":"https://wym0120.github.io/tags/code/"}]}],"categories":[{"name":"paper","slug":"paper","permalink":"https://wym0120.github.io/categories/paper/"},{"name":"Designing","slug":"Designing","permalink":"https://wym0120.github.io/categories/Designing/"},{"name":"report","slug":"report","permalink":"https://wym0120.github.io/categories/report/"},{"name":"FSPL","slug":"FSPL","permalink":"https://wym0120.github.io/categories/FSPL/"},{"name":"os","slug":"os","permalink":"https://wym0120.github.io/categories/os/"},{"name":"os lecture","slug":"os/os-lecture","permalink":"https://wym0120.github.io/categories/os/os-lecture/"},{"name":"jvm","slug":"jvm","permalink":"https://wym0120.github.io/categories/jvm/"},{"name":"code","slug":"code","permalink":"https://wym0120.github.io/categories/code/"}],"tags":[{"name":"lecture","slug":"lecture","permalink":"https://wym0120.github.io/tags/lecture/"},{"name":"Software Testing and Analysis","slug":"Software-Testing-and-Analysis","permalink":"https://wym0120.github.io/tags/Software-Testing-and-Analysis/"},{"name":"writing","slug":"writing","permalink":"https://wym0120.github.io/tags/writing/"},{"name":"english","slug":"english","permalink":"https://wym0120.github.io/tags/english/"},{"name":"lecture notes","slug":"lecture-notes","permalink":"https://wym0120.github.io/tags/lecture-notes/"},{"name":"Software Engineering Process","slug":"Software-Engineering-Process","permalink":"https://wym0120.github.io/tags/Software-Engineering-Process/"},{"name":"Software Maintence and Evolution","slug":"Software-Maintence-and-Evolution","permalink":"https://wym0120.github.io/tags/Software-Maintence-and-Evolution/"},{"name":"Empirical Software Engineering","slug":"Empirical-Software-Engineering","permalink":"https://wym0120.github.io/tags/Empirical-Software-Engineering/"},{"name":"coding","slug":"coding","permalink":"https://wym0120.github.io/tags/coding/"},{"name":"Formal Methods","slug":"Formal-Methods","permalink":"https://wym0120.github.io/tags/Formal-Methods/"},{"name":"os","slug":"os","permalink":"https://wym0120.github.io/tags/os/"},{"name":"mobile","slug":"mobile","permalink":"https://wym0120.github.io/tags/mobile/"},{"name":"testing","slug":"testing","permalink":"https://wym0120.github.io/tags/testing/"},{"name":"icse","slug":"icse","permalink":"https://wym0120.github.io/tags/icse/"},{"name":"jvm","slug":"jvm","permalink":"https://wym0120.github.io/tags/jvm/"},{"name":"gui","slug":"gui","permalink":"https://wym0120.github.io/tags/gui/"},{"name":"code","slug":"code","permalink":"https://wym0120.github.io/tags/code/"}]}